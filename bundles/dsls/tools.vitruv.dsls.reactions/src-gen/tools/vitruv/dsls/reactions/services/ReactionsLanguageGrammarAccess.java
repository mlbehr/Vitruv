/*
 * generated by Xtext 2.10.0
 */
package tools.vitruv.dsls.reactions.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;
import tools.vitruv.dsls.mirbase.services.MirBaseGrammarAccess;

@Singleton
public class ReactionsLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ReactionsFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionsFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cNamespaceImportsAssignment_0.eContents().get(0);
		private final RuleCall cMirBaseFileParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReactionsSegmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactionsSegmentsReactionsSegmentParserRuleCall_2_0 = (RuleCall)cReactionsSegmentsAssignment_2.eContents().get(0);
		
		//ReactionsFile:
		//	namespaceImports=XImportSection?
		//	MirBaseFile
		//	reactionsSegments+=ReactionsSegment+;
		@Override public ParserRule getRule() { return rule; }
		
		//namespaceImports=XImportSection? MirBaseFile reactionsSegments+=ReactionsSegment+
		public Group getGroup() { return cGroup; }
		
		//namespaceImports=XImportSection?
		public Assignment getNamespaceImportsAssignment_0() { return cNamespaceImportsAssignment_0; }
		
		//XImportSection
		public RuleCall getNamespaceImportsXImportSectionParserRuleCall_0_0() { return cNamespaceImportsXImportSectionParserRuleCall_0_0; }
		
		//MirBaseFile
		public RuleCall getMirBaseFileParserRuleCall_1() { return cMirBaseFileParserRuleCall_1; }
		
		//reactionsSegments+=ReactionsSegment+
		public Assignment getReactionsSegmentsAssignment_2() { return cReactionsSegmentsAssignment_2; }
		
		//ReactionsSegment
		public RuleCall getReactionsSegmentsReactionsSegmentParserRuleCall_2_0() { return cReactionsSegmentsReactionsSegmentParserRuleCall_2_0; }
	}
	public class ReactionsSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionsSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInReactionToChangesInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromMetamodelMetamodelReferenceParserRuleCall_3_0 = (RuleCall)cFromMetamodelAssignment_3.eContents().get(0);
		private final Keyword cExecuteActionsInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToMetamodelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToMetamodelMetamodelReferenceParserRuleCall_5_0 = (RuleCall)cToMetamodelAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cReactionsAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cReactionsReactionParserRuleCall_6_0_0 = (RuleCall)cReactionsAssignment_6_0.eContents().get(0);
		private final Assignment cRoutinesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cRoutinesRoutineParserRuleCall_6_1_0 = (RuleCall)cRoutinesAssignment_6_1.eContents().get(0);
		
		//ReactionsSegment:
		//	'reactions:' name=ValidID
		//	'in reaction to changes in' fromMetamodel=MetamodelReference
		//	'execute actions in' toMetamodel=MetamodelReference (reactions+=Reaction | routines+=Routine)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'reactions:' name=ValidID 'in reaction to changes in' fromMetamodel=MetamodelReference 'execute actions in'
		//toMetamodel=MetamodelReference (reactions+=Reaction | routines+=Routine)*
		public Group getGroup() { return cGroup; }
		
		//'reactions:'
		public Keyword getReactionsKeyword_0() { return cReactionsKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'in reaction to changes in'
		public Keyword getInReactionToChangesInKeyword_2() { return cInReactionToChangesInKeyword_2; }
		
		//fromMetamodel=MetamodelReference
		public Assignment getFromMetamodelAssignment_3() { return cFromMetamodelAssignment_3; }
		
		//MetamodelReference
		public RuleCall getFromMetamodelMetamodelReferenceParserRuleCall_3_0() { return cFromMetamodelMetamodelReferenceParserRuleCall_3_0; }
		
		//'execute actions in'
		public Keyword getExecuteActionsInKeyword_4() { return cExecuteActionsInKeyword_4; }
		
		//toMetamodel=MetamodelReference
		public Assignment getToMetamodelAssignment_5() { return cToMetamodelAssignment_5; }
		
		//MetamodelReference
		public RuleCall getToMetamodelMetamodelReferenceParserRuleCall_5_0() { return cToMetamodelMetamodelReferenceParserRuleCall_5_0; }
		
		//(reactions+=Reaction | routines+=Routine)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//reactions+=Reaction
		public Assignment getReactionsAssignment_6_0() { return cReactionsAssignment_6_0; }
		
		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_6_0_0() { return cReactionsReactionParserRuleCall_6_0_0; }
		
		//routines+=Routine
		public Assignment getRoutinesAssignment_6_1() { return cRoutinesAssignment_6_1; }
		
		//Routine
		public RuleCall getRoutinesRoutineParserRuleCall_6_1_0() { return cRoutinesRoutineParserRuleCall_6_1_0; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerTriggerParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Assignment cCallRoutineAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCallRoutineReactionRoutineCallParserRuleCall_5_0 = (RuleCall)cCallRoutineAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// *********************************
		//// *********** REACTIONS ***********
		//// *********************************
		//Reaction:
		//	documentation=ML_COMMENT?
		//	'reaction' name=ValidID? '{'
		//	trigger=Trigger
		//	callRoutine=ReactionRoutineCall
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=ML_COMMENT? 'reaction' name=ValidID? '{' trigger=Trigger callRoutine=ReactionRoutineCall '}'
		public Group getGroup() { return cGroup; }
		
		//documentation=ML_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocumentationML_COMMENTTerminalRuleCall_0_0() { return cDocumentationML_COMMENTTerminalRuleCall_0_0; }
		
		//'reaction'
		public Keyword getReactionKeyword_1() { return cReactionKeyword_1; }
		
		//name=ValidID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_4_0() { return cTriggerTriggerParserRuleCall_4_0; }
		
		//callRoutine=ReactionRoutineCall
		public Assignment getCallRoutineAssignment_5() { return cCallRoutineAssignment_5; }
		
		//ReactionRoutineCall
		public RuleCall getCallRoutineReactionRoutineCallParserRuleCall_5_0() { return cCallRoutineReactionRoutineCallParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ReactionRoutineCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionRoutineCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionRoutineCallAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cRoutineCallBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReactionRoutineCall:
		//	{ReactionRoutineCall} RoutineCallBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReactionRoutineCall} RoutineCallBlock
		public Group getGroup() { return cGroup; }
		
		//{ReactionRoutineCall}
		public Action getReactionRoutineCallAction_0() { return cReactionRoutineCallAction_0; }
		
		//RoutineCallBlock
		public RuleCall getRoutineCallBlockParserRuleCall_1() { return cRoutineCallBlockParserRuleCall_1; }
	}
	public class InvariantViolationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.InvariantViolationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViolationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViolationEClassCrossReference_1_0 = (CrossReference)cViolationAssignment_1.eContents().get(0);
		private final RuleCall cViolationEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cViolationEClassCrossReference_1_0.eContents().get(1);
		
		//// *********** TRIGGER ***********
		//InvariantViolationEvent:
		//	'invariant' violation=[ecore::EClass|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'invariant' violation=[ecore::EClass|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//violation=[ecore::EClass|QualifiedName]
		public Assignment getViolationAssignment_1() { return cViolationAssignment_1; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getViolationEClassCrossReference_1_0() { return cViolationEClassCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getViolationEClassQualifiedNameParserRuleCall_1_0_1() { return cViolationEClassQualifiedNameParserRuleCall_1_0_1; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cModelChangeParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cInvariantViolationEventParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPreconditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPreconditionPreconditionCodeBlockParserRuleCall_2_1_0 = (RuleCall)cPreconditionAssignment_2_1.eContents().get(0);
		
		//Trigger: // TODO HK Extend this by "before" executing the transformation before applying the change
		//	'after' (ModelChange | InvariantViolationEvent) ('with' precondition=PreconditionCodeBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO HK Extend this by "before" executing the transformation before applying the change
		//'after' (ModelChange | InvariantViolationEvent) ('with' precondition=PreconditionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//// TODO HK Extend this by "before" executing the transformation before applying the change
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//(ModelChange | InvariantViolationEvent)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ModelChange
		public RuleCall getModelChangeParserRuleCall_1_0() { return cModelChangeParserRuleCall_1_0; }
		
		//InvariantViolationEvent
		public RuleCall getInvariantViolationEventParserRuleCall_1_1() { return cInvariantViolationEventParserRuleCall_1_1; }
		
		//('with' precondition=PreconditionCodeBlock)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//precondition=PreconditionCodeBlock
		public Assignment getPreconditionAssignment_2_1() { return cPreconditionAssignment_2_1; }
		
		//PreconditionCodeBlock
		public RuleCall getPreconditionPreconditionCodeBlockParserRuleCall_2_1_0() { return cPreconditionPreconditionCodeBlockParserRuleCall_2_1_0; }
	}
	public class ModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ModelChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArbitraryModelChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConcreteModelChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelChange:
		//	ArbitraryModelChange | ConcreteModelChange;
		@Override public ParserRule getRule() { return rule; }
		
		//ArbitraryModelChange | ConcreteModelChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArbitraryModelChange
		public RuleCall getArbitraryModelChangeParserRuleCall_0() { return cArbitraryModelChangeParserRuleCall_0; }
		
		//ConcreteModelChange
		public RuleCall getConcreteModelChangeParserRuleCall_1() { return cConcreteModelChangeParserRuleCall_1; }
	}
	public class ConcreteModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ConcreteModelChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelElementChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelAttributeChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteModelChange:
		//	ModelElementChange | ModelAttributeChange;
		@Override public ParserRule getRule() { return rule; }
		
		//ModelElementChange | ModelAttributeChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModelElementChange
		public RuleCall getModelElementChangeParserRuleCall_0() { return cModelElementChangeParserRuleCall_0; }
		
		//ModelAttributeChange
		public RuleCall getModelAttributeChangeParserRuleCall_1() { return cModelAttributeChangeParserRuleCall_1; }
	}
	public class ModelElementChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ModelElementChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementTypeUnnamedMetaclassReferenceParserRuleCall_1_0 = (RuleCall)cElementTypeAssignment_1.eContents().get(0);
		private final Assignment cChangeTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChangeTypeElementChangeTypeParserRuleCall_2_0 = (RuleCall)cChangeTypeAssignment_2.eContents().get(0);
		
		//ModelElementChange:
		//	'element' elementType=UnnamedMetaclassReference? changeType=ElementChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' elementType=UnnamedMetaclassReference? changeType=ElementChangeType
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//elementType=UnnamedMetaclassReference?
		public Assignment getElementTypeAssignment_1() { return cElementTypeAssignment_1; }
		
		//UnnamedMetaclassReference
		public RuleCall getElementTypeUnnamedMetaclassReferenceParserRuleCall_1_0() { return cElementTypeUnnamedMetaclassReferenceParserRuleCall_1_0; }
		
		//changeType=ElementChangeType
		public Assignment getChangeTypeAssignment_2() { return cChangeTypeAssignment_2; }
		
		//ElementChangeType
		public RuleCall getChangeTypeElementChangeTypeParserRuleCall_2_0() { return cChangeTypeElementChangeTypeParserRuleCall_2_0; }
	}
	public class ModelAttributeChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ModelAttributeChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cModelAttributeInsertedChangeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cInsertInKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cModelAttributeRemovedChangeAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cRemoveFromKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cModelAttributeReplacedChangeAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cReplacedAtKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureMetaclassFeatureReferenceParserRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		
		//ModelAttributeChange:
		//	'attribute' ({ModelAttributeInsertedChange} 'insert in' | {ModelAttributeRemovedChange} 'remove from' |
		//	{ModelAttributeReplacedChange} 'replaced at') feature=MetaclassFeatureReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' ({ModelAttributeInsertedChange} 'insert in' | {ModelAttributeRemovedChange} 'remove from' |
		//{ModelAttributeReplacedChange} 'replaced at') feature=MetaclassFeatureReference
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//({ModelAttributeInsertedChange} 'insert in' | {ModelAttributeRemovedChange} 'remove from' |
		//{ModelAttributeReplacedChange} 'replaced at')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ModelAttributeInsertedChange} 'insert in'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ModelAttributeInsertedChange}
		public Action getModelAttributeInsertedChangeAction_1_0_0() { return cModelAttributeInsertedChangeAction_1_0_0; }
		
		//'insert in'
		public Keyword getInsertInKeyword_1_0_1() { return cInsertInKeyword_1_0_1; }
		
		//{ModelAttributeRemovedChange} 'remove from'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ModelAttributeRemovedChange}
		public Action getModelAttributeRemovedChangeAction_1_1_0() { return cModelAttributeRemovedChangeAction_1_1_0; }
		
		//'remove from'
		public Keyword getRemoveFromKeyword_1_1_1() { return cRemoveFromKeyword_1_1_1; }
		
		//{ModelAttributeReplacedChange} 'replaced at'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ModelAttributeReplacedChange}
		public Action getModelAttributeReplacedChangeAction_1_2_0() { return cModelAttributeReplacedChangeAction_1_2_0; }
		
		//'replaced at'
		public Keyword getReplacedAtKeyword_1_2_1() { return cReplacedAtKeyword_1_2_1; }
		
		//feature=MetaclassFeatureReference
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//MetaclassFeatureReference
		public RuleCall getFeatureMetaclassFeatureReferenceParserRuleCall_2_0() { return cFeatureMetaclassFeatureReferenceParserRuleCall_2_0; }
	}
	public class ArbitraryModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ArbitraryModelChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArbitraryModelChangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnyChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArbitraryModelChange:
		//	{ArbitraryModelChange} 'any change';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArbitraryModelChange} 'any change'
		public Group getGroup() { return cGroup; }
		
		//{ArbitraryModelChange}
		public Action getArbitraryModelChangeAction_0() { return cArbitraryModelChangeAction_0; }
		
		//'any change'
		public Keyword getAnyChangeKeyword_1() { return cAnyChangeKeyword_1; }
	}
	public class ElementExistenceChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementExistenceChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementCreationChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementDeletionChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// *********** Atomic element changes ***********
		//ElementExistenceChangeType:
		//	ElementCreationChangeType | ElementDeletionChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementCreationChangeType | ElementDeletionChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementCreationChangeType
		public RuleCall getElementCreationChangeTypeParserRuleCall_0() { return cElementCreationChangeTypeParserRuleCall_0; }
		
		//ElementDeletionChangeType
		public RuleCall getElementDeletionChangeTypeParserRuleCall_1() { return cElementDeletionChangeTypeParserRuleCall_1; }
	}
	public class ElementUsageChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementUsageChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementReplacementChangeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementUsageChangeType ModelElementUsageChangeType:
		//	ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType
		@Override public ParserRule getRule() { return rule; }
		
		//ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionChangeType
		public RuleCall getElementInsertionChangeTypeParserRuleCall_0() { return cElementInsertionChangeTypeParserRuleCall_0; }
		
		//ElementRemovalChangeType
		public RuleCall getElementRemovalChangeTypeParserRuleCall_1() { return cElementRemovalChangeTypeParserRuleCall_1; }
		
		//ElementReplacementChangeType
		public RuleCall getElementReplacementChangeTypeParserRuleCall_2() { return cElementReplacementChangeTypeParserRuleCall_2; }
	}
	public class ElementCreationChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementCreationChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cElementCreationChangeTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//ElementCreationChangeType:
		//	'created' {ElementCreationChangeType};
		@Override public ParserRule getRule() { return rule; }
		
		//'created' {ElementCreationChangeType}
		public Group getGroup() { return cGroup; }
		
		//'created'
		public Keyword getCreatedKeyword_0() { return cCreatedKeyword_0; }
		
		//{ElementCreationChangeType}
		public Action getElementCreationChangeTypeAction_1() { return cElementCreationChangeTypeAction_1; }
	}
	public class ElementDeletionChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementDeletionChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeletedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cElementDeletionChangeTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//ElementDeletionChangeType:
		//	'deleted' {ElementDeletionChangeType};
		@Override public ParserRule getRule() { return rule; }
		
		//'deleted' {ElementDeletionChangeType}
		public Group getGroup() { return cGroup; }
		
		//'deleted'
		public Keyword getDeletedKeyword_0() { return cDeletedKeyword_0; }
		
		//{ElementDeletionChangeType}
		public Action getElementDeletionChangeTypeAction_1() { return cElementDeletionChangeTypeAction_1; }
	}
	public class ElementFeatureChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementFeatureChangeType");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeatureMetaclassFeatureReferenceParserRuleCall_0 = (RuleCall)cFeatureAssignment.eContents().get(0);
		
		//fragment ElementFeatureChangeType:
		//	feature=MetaclassFeatureReference;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=MetaclassFeatureReference
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//MetaclassFeatureReference
		public RuleCall getFeatureMetaclassFeatureReferenceParserRuleCall_0() { return cFeatureMetaclassFeatureReferenceParserRuleCall_0; }
	}
	public class ElementRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRootChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionAsRootChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalAsRootChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// This is just for a complete type hierachy
		//ElementRootChangeType:
		//	ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionAsRootChangeType
		public RuleCall getElementInsertionAsRootChangeTypeParserRuleCall_0() { return cElementInsertionAsRootChangeTypeParserRuleCall_0; }
		
		//ElementRemovalAsRootChangeType
		public RuleCall getElementRemovalAsRootChangeTypeParserRuleCall_1() { return cElementRemovalAsRootChangeTypeParserRuleCall_1; }
	}
	public class ElementInsertionChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionInListChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementInsertionAsRootChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementInsertionChangeType:
		//	ElementInsertionInListChangeType | ElementInsertionAsRootChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementInsertionInListChangeType | ElementInsertionAsRootChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionInListChangeType
		public RuleCall getElementInsertionInListChangeTypeParserRuleCall_0() { return cElementInsertionInListChangeTypeParserRuleCall_0; }
		
		//ElementInsertionAsRootChangeType
		public RuleCall getElementInsertionAsRootChangeTypeParserRuleCall_1() { return cElementInsertionAsRootChangeTypeParserRuleCall_1; }
	}
	public class ElementInsertionInListChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionInListChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertedInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cElementFeatureChangeTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElementInsertionInListChangeType:
		//	'inserted in' ElementFeatureChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'inserted in' ElementFeatureChangeType
		public Group getGroup() { return cGroup; }
		
		//'inserted in'
		public Keyword getInsertedInKeyword_0() { return cInsertedInKeyword_0; }
		
		//ElementFeatureChangeType
		public RuleCall getElementFeatureChangeTypeParserRuleCall_1() { return cElementFeatureChangeTypeParserRuleCall_1; }
	}
	public class ElementInsertionAsRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionAsRootChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementInsertionAsRootChangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInsertedAsRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ElementInsertionAsRootChangeType:
		//	{ElementInsertionAsRootChangeType} 'inserted as root';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementInsertionAsRootChangeType} 'inserted as root'
		public Group getGroup() { return cGroup; }
		
		//{ElementInsertionAsRootChangeType}
		public Action getElementInsertionAsRootChangeTypeAction_0() { return cElementInsertionAsRootChangeTypeAction_0; }
		
		//'inserted as root'
		public Keyword getInsertedAsRootKeyword_1() { return cInsertedAsRootKeyword_1; }
	}
	public class ElementRemovalChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementRemovalAsRootChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalFromListChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementRemovalChangeType:
		//	ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementRemovalAsRootChangeType
		public RuleCall getElementRemovalAsRootChangeTypeParserRuleCall_0() { return cElementRemovalAsRootChangeTypeParserRuleCall_0; }
		
		//ElementRemovalFromListChangeType
		public RuleCall getElementRemovalFromListChangeTypeParserRuleCall_1() { return cElementRemovalFromListChangeTypeParserRuleCall_1; }
	}
	public class ElementRemovalAsRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalAsRootChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementRemovalAsRootChangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemovedAsRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ElementRemovalAsRootChangeType:
		//	{ElementRemovalAsRootChangeType} 'removed as root';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementRemovalAsRootChangeType} 'removed as root'
		public Group getGroup() { return cGroup; }
		
		//{ElementRemovalAsRootChangeType}
		public Action getElementRemovalAsRootChangeTypeAction_0() { return cElementRemovalAsRootChangeTypeAction_0; }
		
		//'removed as root'
		public Keyword getRemovedAsRootKeyword_1() { return cRemovedAsRootKeyword_1; }
	}
	public class ElementRemovalFromListChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalFromListChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemovedFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cElementFeatureChangeTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElementRemovalFromListChangeType:
		//	'removed from' ElementFeatureChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'removed from' ElementFeatureChangeType
		public Group getGroup() { return cGroup; }
		
		//'removed from'
		public Keyword getRemovedFromKeyword_0() { return cRemovedFromKeyword_0; }
		
		//ElementFeatureChangeType
		public RuleCall getElementFeatureChangeTypeParserRuleCall_1() { return cElementFeatureChangeTypeParserRuleCall_1; }
	}
	public class ElementReplacementChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementReplacementChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplacedAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cElementFeatureChangeTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElementReplacementChangeType:
		//	'replaced at' ElementFeatureChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'replaced at' ElementFeatureChangeType
		public Group getGroup() { return cGroup; }
		
		//'replaced at'
		public Keyword getReplacedAtKeyword_0() { return cReplacedAtKeyword_0; }
		
		//ElementFeatureChangeType
		public RuleCall getElementFeatureChangeTypeParserRuleCall_1() { return cElementFeatureChangeTypeParserRuleCall_1; }
	}
	public class ElementCreationAndInsertionChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementCreationAndInsertionChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCreateChangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCreateChangeElementCreationChangeTypeParserRuleCall_0_0 = (RuleCall)cCreateChangeAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInsertChangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInsertChangeElementInsertionChangeTypeParserRuleCall_2_0 = (RuleCall)cInsertChangeAssignment_2.eContents().get(0);
		
		//// *********** Compound element changes ***********
		//ElementCreationAndInsertionChangeType:
		//	createChange=ElementCreationChangeType 'and' insertChange=ElementInsertionChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//createChange=ElementCreationChangeType 'and' insertChange=ElementInsertionChangeType
		public Group getGroup() { return cGroup; }
		
		//createChange=ElementCreationChangeType
		public Assignment getCreateChangeAssignment_0() { return cCreateChangeAssignment_0; }
		
		//ElementCreationChangeType
		public RuleCall getCreateChangeElementCreationChangeTypeParserRuleCall_0_0() { return cCreateChangeElementCreationChangeTypeParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//insertChange=ElementInsertionChangeType
		public Assignment getInsertChangeAssignment_2() { return cInsertChangeAssignment_2; }
		
		//ElementInsertionChangeType
		public RuleCall getInsertChangeElementInsertionChangeTypeParserRuleCall_2_0() { return cInsertChangeElementInsertionChangeTypeParserRuleCall_2_0; }
	}
	public class ElementDeletionAndRemovalChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementDeletionAndRemovalChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeleteChangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0 = (RuleCall)cDeleteChangeAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRemoveChangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRemoveChangeElementRemovalChangeTypeParserRuleCall_2_0 = (RuleCall)cRemoveChangeAssignment_2.eContents().get(0);
		
		//ElementDeletionAndRemovalChangeType:
		//	deleteChange=ElementDeletionChangeType 'and' removeChange=ElementRemovalChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//deleteChange=ElementDeletionChangeType 'and' removeChange=ElementRemovalChangeType
		public Group getGroup() { return cGroup; }
		
		//deleteChange=ElementDeletionChangeType
		public Assignment getDeleteChangeAssignment_0() { return cDeleteChangeAssignment_0; }
		
		//ElementDeletionChangeType
		public RuleCall getDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0() { return cDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//removeChange=ElementRemovalChangeType
		public Assignment getRemoveChangeAssignment_2() { return cRemoveChangeAssignment_2; }
		
		//ElementRemovalChangeType
		public RuleCall getRemoveChangeElementRemovalChangeTypeParserRuleCall_2_0() { return cRemoveChangeElementRemovalChangeTypeParserRuleCall_2_0; }
	}
	public class ElementDeletionAndCreationAndReplacementChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementDeletionAndCreationAndReplacementChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeleteChangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0 = (RuleCall)cDeleteChangeAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCreateChangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCreateChangeElementCreationChangeTypeParserRuleCall_2_0 = (RuleCall)cCreateChangeAssignment_2.eContents().get(0);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReplacedChangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReplacedChangeElementReplacementChangeTypeParserRuleCall_4_0 = (RuleCall)cReplacedChangeAssignment_4.eContents().get(0);
		
		//ElementDeletionAndCreationAndReplacementChangeType:
		//	deleteChange=ElementDeletionChangeType 'and' createChange=ElementCreationChangeType 'and'
		//	replacedChange=ElementReplacementChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//deleteChange=ElementDeletionChangeType 'and' createChange=ElementCreationChangeType 'and'
		//replacedChange=ElementReplacementChangeType
		public Group getGroup() { return cGroup; }
		
		//deleteChange=ElementDeletionChangeType
		public Assignment getDeleteChangeAssignment_0() { return cDeleteChangeAssignment_0; }
		
		//ElementDeletionChangeType
		public RuleCall getDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0() { return cDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//createChange=ElementCreationChangeType
		public Assignment getCreateChangeAssignment_2() { return cCreateChangeAssignment_2; }
		
		//ElementCreationChangeType
		public RuleCall getCreateChangeElementCreationChangeTypeParserRuleCall_2_0() { return cCreateChangeElementCreationChangeTypeParserRuleCall_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }
		
		//replacedChange=ElementReplacementChangeType
		public Assignment getReplacedChangeAssignment_4() { return cReplacedChangeAssignment_4; }
		
		//ElementReplacementChangeType
		public RuleCall getReplacedChangeElementReplacementChangeTypeParserRuleCall_4_0() { return cReplacedChangeElementReplacementChangeTypeParserRuleCall_4_0; }
	}
	public class ElementChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementExistenceChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementUsageChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementCompoundChangeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementChangeType:
		//	ElementExistenceChangeType | ElementUsageChangeType | ElementCompoundChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementExistenceChangeType | ElementUsageChangeType | ElementCompoundChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementExistenceChangeType
		public RuleCall getElementExistenceChangeTypeParserRuleCall_0() { return cElementExistenceChangeTypeParserRuleCall_0; }
		
		//ElementUsageChangeType
		public RuleCall getElementUsageChangeTypeParserRuleCall_1() { return cElementUsageChangeTypeParserRuleCall_1; }
		
		//ElementCompoundChangeType
		public RuleCall getElementCompoundChangeTypeParserRuleCall_2() { return cElementCompoundChangeTypeParserRuleCall_2; }
	}
	public class ElementCompoundChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementCompoundChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementCreationAndInsertionChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementDeletionAndRemovalChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementDeletionAndCreationAndReplacementChangeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementCompoundChangeType:
		//	ElementCreationAndInsertionChangeType | ElementDeletionAndRemovalChangeType |
		//	ElementDeletionAndCreationAndReplacementChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementCreationAndInsertionChangeType | ElementDeletionAndRemovalChangeType |
		//ElementDeletionAndCreationAndReplacementChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementCreationAndInsertionChangeType
		public RuleCall getElementCreationAndInsertionChangeTypeParserRuleCall_0() { return cElementCreationAndInsertionChangeTypeParserRuleCall_0; }
		
		//ElementDeletionAndRemovalChangeType
		public RuleCall getElementDeletionAndRemovalChangeTypeParserRuleCall_1() { return cElementDeletionAndRemovalChangeTypeParserRuleCall_1; }
		
		//ElementDeletionAndCreationAndReplacementChangeType
		public RuleCall getElementDeletionAndCreationAndReplacementChangeTypeParserRuleCall_2() { return cElementDeletionAndCreationAndReplacementChangeTypeParserRuleCall_2; }
	}
	public class RoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Routine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoutineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputRoutineInputParserRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMatcherAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMatcherMatcherBlockParserRuleCall_4_0 = (RuleCall)cMatcherAssignment_4.eContents().get(0);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionActionBlockParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		private final Assignment cReturnAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnReturnStatementParserRuleCall_6_0 = (RuleCall)cReturnAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ***************************************
		//// *********** REPAIR ROUTINES ***********
		//// ***************************************
		//Routine:
		//	'routine' name=ValidID input=RoutineInput '{'
		//	matcher=MatcherBlock?
		//	action=ActionBlock
		//	return=ReturnStatement?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'routine' name=ValidID input=RoutineInput '{' matcher=MatcherBlock? action=ActionBlock return=ReturnStatement? '}'
		public Group getGroup() { return cGroup; }
		
		//'routine'
		public Keyword getRoutineKeyword_0() { return cRoutineKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//input=RoutineInput
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//RoutineInput
		public RuleCall getInputRoutineInputParserRuleCall_2_0() { return cInputRoutineInputParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//matcher=MatcherBlock?
		public Assignment getMatcherAssignment_4() { return cMatcherAssignment_4; }
		
		//MatcherBlock
		public RuleCall getMatcherMatcherBlockParserRuleCall_4_0() { return cMatcherMatcherBlockParserRuleCall_4_0; }
		
		//action=ActionBlock
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//ActionBlock
		public RuleCall getActionActionBlockParserRuleCall_5_0() { return cActionActionBlockParserRuleCall_5_0; }
		
		//return=ReturnStatement?
		public Assignment getReturnAssignment_6() { return cReturnAssignment_6; }
		
		//ReturnStatement
		public RuleCall getReturnReturnStatementParserRuleCall_6_0() { return cReturnReturnStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RoutineInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cModelInputElementsAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cModelInputElementsClassicallyNamedModelElementParserRuleCall_2_0_0_0 = (RuleCall)cModelInputElementsAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Keyword cPlainKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementParserRuleCall_2_0_1_1_0 = (RuleCall)cJavaInputElementsAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cModelInputElementsAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cModelInputElementsClassicallyNamedModelElementParserRuleCall_2_1_1_0_0 = (RuleCall)cModelInputElementsAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cAlternatives_2_1_1.eContents().get(1);
		private final Keyword cPlainKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementParserRuleCall_2_1_1_1_1_0 = (RuleCall)cJavaInputElementsAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RoutineInput:
		//	{RoutineInput}
		//	'(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement) (','
		//	(modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{RoutineInput} '(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		//(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{RoutineInput}
		public Action getRoutineInputAction_0() { return cRoutineInputAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement) (','
		//(modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//modelInputElements+=ClassicallyNamedModelElement
		public Assignment getModelInputElementsAssignment_2_0_0() { return cModelInputElementsAssignment_2_0_0; }
		
		//ClassicallyNamedModelElement
		public RuleCall getModelInputElementsClassicallyNamedModelElementParserRuleCall_2_0_0_0() { return cModelInputElementsClassicallyNamedModelElementParserRuleCall_2_0_0_0; }
		
		//"plain" javaInputElements+=NamedJavaElement
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//"plain"
		public Keyword getPlainKeyword_2_0_1_0() { return cPlainKeyword_2_0_1_0; }
		
		//javaInputElements+=NamedJavaElement
		public Assignment getJavaInputElementsAssignment_2_0_1_1() { return cJavaInputElementsAssignment_2_0_1_1; }
		
		//NamedJavaElement
		public RuleCall getJavaInputElementsNamedJavaElementParserRuleCall_2_0_1_1_0() { return cJavaInputElementsNamedJavaElementParserRuleCall_2_0_1_1_0; }
		
		//(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//(modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//modelInputElements+=ClassicallyNamedModelElement
		public Assignment getModelInputElementsAssignment_2_1_1_0() { return cModelInputElementsAssignment_2_1_1_0; }
		
		//ClassicallyNamedModelElement
		public RuleCall getModelInputElementsClassicallyNamedModelElementParserRuleCall_2_1_1_0_0() { return cModelInputElementsClassicallyNamedModelElementParserRuleCall_2_1_1_0_0; }
		
		//"plain" javaInputElements+=NamedJavaElement
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//"plain"
		public Keyword getPlainKeyword_2_1_1_1_0() { return cPlainKeyword_2_1_1_1_0; }
		
		//javaInputElements+=NamedJavaElement
		public Assignment getJavaInputElementsAssignment_2_1_1_1_1() { return cJavaInputElementsAssignment_2_1_1_1_1; }
		
		//NamedJavaElement
		public RuleCall getJavaInputElementsNamedJavaElementParserRuleCall_2_1_1_1_1_0() { return cJavaInputElementsNamedJavaElementParserRuleCall_2_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MatcherBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatcherBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatcherAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMatcherStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMatcherStatementsMatcherStatementParserRuleCall_3_0 = (RuleCall)cMatcherStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// *********** MATCHER ***********
		//MatcherBlock Matcher:
		//	{Matcher}
		//	'match' '{'
		//	matcherStatements+=MatcherStatement+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{Matcher} 'match' '{' matcherStatements+=MatcherStatement+ '}'
		public Group getGroup() { return cGroup; }
		
		//{Matcher}
		public Action getMatcherAction_0() { return cMatcherAction_0; }
		
		//'match'
		public Keyword getMatchKeyword_1() { return cMatchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//matcherStatements+=MatcherStatement+
		public Assignment getMatcherStatementsAssignment_3() { return cMatcherStatementsAssignment_3; }
		
		//MatcherStatement
		public RuleCall getMatcherStatementsMatcherStatementParserRuleCall_3_0() { return cMatcherStatementsMatcherStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MatcherStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatcherStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRetrieveModelElementStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatcherCheckStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MatcherStatement:
		//	RetrieveModelElementStatement | MatcherCheckStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//RetrieveModelElementStatement | MatcherCheckStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RetrieveModelElementStatement
		public RuleCall getRetrieveModelElementStatementParserRuleCall_0() { return cRetrieveModelElementStatementParserRuleCall_0; }
		
		//MatcherCheckStatement
		public RuleCall getMatcherCheckStatementParserRuleCall_1() { return cMatcherCheckStatementParserRuleCall_1; }
	}
	public class RetrieveModelElementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RetrieveModelElementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRetrieveModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cValKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0_1_0 = (RuleCall)cNameAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_2 = (Keyword)cGroup_1_0_0.eContents().get(2);
		private final Keyword cRetrieveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOptionalAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_1_0_2_0 = (Keyword)cOptionalAssignment_1_0_2.eContents().get(0);
		private final Assignment cAbscenceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAbscenceRequireAbsenceOfKeyword_1_1_0 = (Keyword)cAbscenceAssignment_1_1.eContents().get(0);
		private final RuleCall cMetaclassReferenceParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCorrespondingToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCorrespondenceSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_4_0 = (RuleCall)cCorrespondenceSourceAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTaggedWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cTaggableParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPreconditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPreconditionPreconditionCodeBlockParserRuleCall_6_1_0 = (RuleCall)cPreconditionAssignment_6_1.eContents().get(0);
		
		//RetrieveModelElementStatement RetrieveModelElement:
		//	{RetrieveModelElement} (('val' name=ValidID '=')? 'retrieve' optional?='optional'? | abscence?='require absence of')
		//	MetaclassReference 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)?
		//	('with' precondition=PreconditionCodeBlock)?
		@Override public ParserRule getRule() { return rule; }
		
		//{RetrieveModelElement} (('val' name=ValidID '=')? 'retrieve' optional?='optional'? | abscence?='require absence of')
		//MetaclassReference 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)?
		//('with' precondition=PreconditionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//{RetrieveModelElement}
		public Action getRetrieveModelElementAction_0() { return cRetrieveModelElementAction_0; }
		
		//(('val' name=ValidID '=')? 'retrieve' optional?='optional'? | abscence?='require absence of')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('val' name=ValidID '=')? 'retrieve' optional?='optional'?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('val' name=ValidID '=')?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'val'
		public Keyword getValKeyword_1_0_0_0() { return cValKeyword_1_0_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_0_0_1() { return cNameAssignment_1_0_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0_1_0() { return cNameValidIDParserRuleCall_1_0_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_2() { return cEqualsSignKeyword_1_0_0_2; }
		
		//'retrieve'
		public Keyword getRetrieveKeyword_1_0_1() { return cRetrieveKeyword_1_0_1; }
		
		//optional?='optional'?
		public Assignment getOptionalAssignment_1_0_2() { return cOptionalAssignment_1_0_2; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_1_0_2_0() { return cOptionalOptionalKeyword_1_0_2_0; }
		
		//abscence?='require absence of'
		public Assignment getAbscenceAssignment_1_1() { return cAbscenceAssignment_1_1; }
		
		//'require absence of'
		public Keyword getAbscenceRequireAbsenceOfKeyword_1_1_0() { return cAbscenceRequireAbsenceOfKeyword_1_1_0; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_2() { return cMetaclassReferenceParserRuleCall_2; }
		
		//'corresponding to'
		public Keyword getCorrespondingToKeyword_3() { return cCorrespondingToKeyword_3; }
		
		//correspondenceSource=CorrespondingObjectCodeBlock
		public Assignment getCorrespondenceSourceAssignment_4() { return cCorrespondenceSourceAssignment_4; }
		
		//CorrespondingObjectCodeBlock
		public RuleCall getCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_4_0() { return cCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_4_0; }
		
		//('tagged with' Taggable)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'tagged with'
		public Keyword getTaggedWithKeyword_5_0() { return cTaggedWithKeyword_5_0; }
		
		//Taggable
		public RuleCall getTaggableParserRuleCall_5_1() { return cTaggableParserRuleCall_5_1; }
		
		//('with' precondition=PreconditionCodeBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'with'
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }
		
		//precondition=PreconditionCodeBlock
		public Assignment getPreconditionAssignment_6_1() { return cPreconditionAssignment_6_1; }
		
		//PreconditionCodeBlock
		public RuleCall getPreconditionPreconditionCodeBlockParserRuleCall_6_1_0() { return cPreconditionPreconditionCodeBlockParserRuleCall_6_1_0; }
	}
	public class MatcherCheckStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatcherCheckStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatcherCheckStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MatcherCheckStatement:
		//	{MatcherCheckStatement}
		//	'check' CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{MatcherCheckStatement} 'check' CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{MatcherCheckStatement}
		public Action getMatcherCheckStatementAction_0() { return cMatcherCheckStatementAction_0; }
		
		//'check'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_2() { return cCodeBlockParserRuleCall_2; }
	}
	public class ActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionStatementsActionStatementParserRuleCall_3_0 = (RuleCall)cActionStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// *********** EFFECTS ***********
		//ActionBlock Action:
		//	{Action}
		//	'action' '{'
		//	actionStatements+=ActionStatement+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} 'action' '{' actionStatements+=ActionStatement+ '}'
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//actionStatements+=ActionStatement+
		public Assignment getActionStatementsAssignment_3() { return cActionStatementsAssignment_3; }
		
		//ActionStatement
		public RuleCall getActionStatementsActionStatementParserRuleCall_3_0() { return cActionStatementsActionStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RoutineCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineCallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineCallStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cRoutineCallBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RoutineCallStatement:
		//	{RoutineCallStatement} RoutineCallBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{RoutineCallStatement} RoutineCallBlock
		public Group getGroup() { return cGroup; }
		
		//{RoutineCallStatement}
		public Action getRoutineCallStatementAction_0() { return cRoutineCallStatementAction_0; }
		
		//RoutineCallBlock
		public RuleCall getRoutineCallBlockParserRuleCall_1() { return cRoutineCallBlockParserRuleCall_1; }
	}
	public class ActionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ActionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateModelElementStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeleteModelElementStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateModelElementStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCreateCorrespondenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRemoveCorrespondenceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExecuteActionBlockParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRoutineCallStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ActionStatement:
		//	CreateModelElementStatement | DeleteModelElementStatement | UpdateModelElementStatement |
		//	CreateCorrespondenceStatement | RemoveCorrespondenceStatement | ExecuteActionBlock | RoutineCallStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateModelElementStatement | DeleteModelElementStatement | UpdateModelElementStatement | CreateCorrespondenceStatement
		//| RemoveCorrespondenceStatement | ExecuteActionBlock | RoutineCallStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateModelElementStatement
		public RuleCall getCreateModelElementStatementParserRuleCall_0() { return cCreateModelElementStatementParserRuleCall_0; }
		
		//DeleteModelElementStatement
		public RuleCall getDeleteModelElementStatementParserRuleCall_1() { return cDeleteModelElementStatementParserRuleCall_1; }
		
		//UpdateModelElementStatement
		public RuleCall getUpdateModelElementStatementParserRuleCall_2() { return cUpdateModelElementStatementParserRuleCall_2; }
		
		//CreateCorrespondenceStatement
		public RuleCall getCreateCorrespondenceStatementParserRuleCall_3() { return cCreateCorrespondenceStatementParserRuleCall_3; }
		
		//RemoveCorrespondenceStatement
		public RuleCall getRemoveCorrespondenceStatementParserRuleCall_4() { return cRemoveCorrespondenceStatementParserRuleCall_4; }
		
		//ExecuteActionBlock
		public RuleCall getExecuteActionBlockParserRuleCall_5() { return cExecuteActionBlockParserRuleCall_5; }
		
		//RoutineCallStatement
		public RuleCall getRoutineCallStatementParserRuleCall_6() { return cRoutineCallStatementParserRuleCall_6; }
	}
	public class CreateModelElementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CreateModelElementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCreateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cMetaclassReferenceParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAndKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cInitializeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInitializationBlockAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInitializationBlockExecutionCodeBlockParserRuleCall_6_2_0 = (RuleCall)cInitializationBlockAssignment_6_2.eContents().get(0);
		
		//CreateModelElementStatement CreateModelElement:
		//	{CreateModelElement}
		//	'val' name=ValidID '=' 'create' MetaclassReference ("and" "initialize" initializationBlock=ExecutionCodeBlock)?
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateModelElement} 'val' name=ValidID '=' 'create' MetaclassReference ("and" "initialize"
		//initializationBlock=ExecutionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//{CreateModelElement}
		public Action getCreateModelElementAction_0() { return cCreateModelElementAction_0; }
		
		//'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//'create'
		public Keyword getCreateKeyword_4() { return cCreateKeyword_4; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_5() { return cMetaclassReferenceParserRuleCall_5; }
		
		//("and" "initialize" initializationBlock=ExecutionCodeBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"and"
		public Keyword getAndKeyword_6_0() { return cAndKeyword_6_0; }
		
		//"initialize"
		public Keyword getInitializeKeyword_6_1() { return cInitializeKeyword_6_1; }
		
		//initializationBlock=ExecutionCodeBlock
		public Assignment getInitializationBlockAssignment_6_2() { return cInitializationBlockAssignment_6_2; }
		
		//ExecutionCodeBlock
		public RuleCall getInitializationBlockExecutionCodeBlockParserRuleCall_6_2_0() { return cInitializationBlockExecutionCodeBlockParserRuleCall_6_2_0; }
	}
	public class DeleteModelElementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.DeleteModelElementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeleteModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeleteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementExistingElementReferenceParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//DeleteModelElementStatement DeleteModelElement:
		//	{DeleteModelElement}
		//	"delete" element=ExistingElementReference
		@Override public ParserRule getRule() { return rule; }
		
		//{DeleteModelElement} "delete" element=ExistingElementReference
		public Group getGroup() { return cGroup; }
		
		//{DeleteModelElement}
		public Action getDeleteModelElementAction_0() { return cDeleteModelElementAction_0; }
		
		//"delete"
		public Keyword getDeleteKeyword_1() { return cDeleteKeyword_1; }
		
		//element=ExistingElementReference
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ExistingElementReference
		public RuleCall getElementExistingElementReferenceParserRuleCall_2_0() { return cElementExistingElementReferenceParserRuleCall_2_0; }
	}
	public class UpdateModelElementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.UpdateModelElementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUpdateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementExistingElementReferenceParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Assignment cUpdateBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpdateBlockExecutionCodeBlockParserRuleCall_3_0 = (RuleCall)cUpdateBlockAssignment_3.eContents().get(0);
		
		//UpdateModelElementStatement UpdateModelElement:
		//	{UpdateModelElement}
		//	"update" element=ExistingElementReference updateBlock=ExecutionCodeBlock
		@Override public ParserRule getRule() { return rule; }
		
		//{UpdateModelElement} "update" element=ExistingElementReference updateBlock=ExecutionCodeBlock
		public Group getGroup() { return cGroup; }
		
		//{UpdateModelElement}
		public Action getUpdateModelElementAction_0() { return cUpdateModelElementAction_0; }
		
		//"update"
		public Keyword getUpdateKeyword_1() { return cUpdateKeyword_1; }
		
		//element=ExistingElementReference
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ExistingElementReference
		public RuleCall getElementExistingElementReferenceParserRuleCall_2_0() { return cElementExistingElementReferenceParserRuleCall_2_0; }
		
		//updateBlock=ExecutionCodeBlock
		public Assignment getUpdateBlockAssignment_3() { return cUpdateBlockAssignment_3; }
		
		//ExecutionCodeBlock
		public RuleCall getUpdateBlockExecutionCodeBlockParserRuleCall_3_0() { return cUpdateBlockExecutionCodeBlockParserRuleCall_3_0; }
	}
	public class CreateCorrespondenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CreateCorrespondenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateCorrespondenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAddCorrespondenceBetweenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstElementExistingElementReferenceParserRuleCall_2_0 = (RuleCall)cFirstElementAssignment_2.eContents().get(0);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSecondElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondElementExistingElementReferenceParserRuleCall_4_0 = (RuleCall)cSecondElementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTagWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cTaggableParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//CreateCorrespondenceStatement CreateCorrespondence:
		//	{CreateCorrespondence}
		//	"add correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
		//	('tag with' Taggable)?
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateCorrespondence} "add correspondence between" firstElement=ExistingElementReference "and"
		//secondElement=ExistingElementReference ('tag with' Taggable)?
		public Group getGroup() { return cGroup; }
		
		//{CreateCorrespondence}
		public Action getCreateCorrespondenceAction_0() { return cCreateCorrespondenceAction_0; }
		
		//"add correspondence between"
		public Keyword getAddCorrespondenceBetweenKeyword_1() { return cAddCorrespondenceBetweenKeyword_1; }
		
		//firstElement=ExistingElementReference
		public Assignment getFirstElementAssignment_2() { return cFirstElementAssignment_2; }
		
		//ExistingElementReference
		public RuleCall getFirstElementExistingElementReferenceParserRuleCall_2_0() { return cFirstElementExistingElementReferenceParserRuleCall_2_0; }
		
		//"and"
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }
		
		//secondElement=ExistingElementReference
		public Assignment getSecondElementAssignment_4() { return cSecondElementAssignment_4; }
		
		//ExistingElementReference
		public RuleCall getSecondElementExistingElementReferenceParserRuleCall_4_0() { return cSecondElementExistingElementReferenceParserRuleCall_4_0; }
		
		//('tag with' Taggable)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'tag with'
		public Keyword getTagWithKeyword_5_0() { return cTagWithKeyword_5_0; }
		
		//Taggable
		public RuleCall getTaggableParserRuleCall_5_1() { return cTaggableParserRuleCall_5_1; }
	}
	public class RemoveCorrespondenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RemoveCorrespondenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveCorrespondenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveCorrespondenceBetweenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstElementExistingElementReferenceParserRuleCall_2_0 = (RuleCall)cFirstElementAssignment_2.eContents().get(0);
		private final Keyword cAndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSecondElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondElementExistingElementReferenceParserRuleCall_4_0 = (RuleCall)cSecondElementAssignment_4.eContents().get(0);
		
		//RemoveCorrespondenceStatement RemoveCorrespondence:
		//	{RemoveCorrespondence}
		//	"remove correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
		@Override public ParserRule getRule() { return rule; }
		
		//{RemoveCorrespondence} "remove correspondence between" firstElement=ExistingElementReference "and"
		//secondElement=ExistingElementReference
		public Group getGroup() { return cGroup; }
		
		//{RemoveCorrespondence}
		public Action getRemoveCorrespondenceAction_0() { return cRemoveCorrespondenceAction_0; }
		
		//"remove correspondence between"
		public Keyword getRemoveCorrespondenceBetweenKeyword_1() { return cRemoveCorrespondenceBetweenKeyword_1; }
		
		//firstElement=ExistingElementReference
		public Assignment getFirstElementAssignment_2() { return cFirstElementAssignment_2; }
		
		//ExistingElementReference
		public RuleCall getFirstElementExistingElementReferenceParserRuleCall_2_0() { return cFirstElementExistingElementReferenceParserRuleCall_2_0; }
		
		//"and"
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }
		
		//secondElement=ExistingElementReference
		public Assignment getSecondElementAssignment_4() { return cSecondElementAssignment_4; }
		
		//ExistingElementReference
		public RuleCall getSecondElementExistingElementReferenceParserRuleCall_4_0() { return cSecondElementExistingElementReferenceParserRuleCall_4_0; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CodeBlock");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeXExpressionParserRuleCall_0 = (RuleCall)cCodeAssignment.eContents().get(0);
		
		//// ****** CODE BLOCKS ******
		//fragment CodeBlock:
		//	code=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//code=XExpression
		public Assignment getCodeAssignment() { return cCodeAssignment; }
		
		//XExpression
		public RuleCall getCodeXExpressionParserRuleCall_0() { return cCodeXExpressionParserRuleCall_0; }
	}
	public class ExecuteActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ExecuteActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment ExecuteActionBlock:
		//	'execute' CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'execute' CodeBlock
		public Group getGroup() { return cGroup; }
		
		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class RoutineCallBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineCallBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cValKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment RoutineCallBlock:
		//	('val' name=ValidID '=')? 'call' CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//('val' name=ValidID '=')? 'call' CodeBlock
		public Group getGroup() { return cGroup; }
		
		//('val' name=ValidID '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'val'
		public Keyword getValKeyword_0_0() { return cValKeyword_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//'call'
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_2() { return cCodeBlockParserRuleCall_2; }
	}
	public class TaggableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Taggable");
		private final Assignment cTagAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTagTagCodeBlockParserRuleCall_0 = (RuleCall)cTagAssignment.eContents().get(0);
		
		//fragment Taggable:
		//	tag=TagCodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//tag=TagCodeBlock
		public Assignment getTagAssignment() { return cTagAssignment; }
		
		//TagCodeBlock
		public RuleCall getTagTagCodeBlockParserRuleCall_0() { return cTagTagCodeBlockParserRuleCall_0; }
	}
	public class ExistingElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ExistingElementReference");
		private final RuleCall cCodeBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExistingElementReference:
		//	CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall() { return cCodeBlockParserRuleCall; }
	}
	public class TagCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.TagCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTagCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TagCodeBlock:
		//	{TagCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{TagCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{TagCodeBlock}
		public Action getTagCodeBlockAction_0() { return cTagCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class PreconditionCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.PreconditionCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreconditionCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PreconditionCodeBlock:
		//	{PreconditionCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{PreconditionCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{PreconditionCodeBlock}
		public Action getPreconditionCodeBlockAction_0() { return cPreconditionCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class CorrespondingObjectCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CorrespondingObjectCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCorrespondingObjectCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CorrespondingObjectCodeBlock:
		//	{CorrespondingObjectCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{CorrespondingObjectCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{CorrespondingObjectCodeBlock}
		public Action getCorrespondingObjectCodeBlockAction_0() { return cCorrespondingObjectCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class ExecutionCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ExecutionCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecutionCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExecutionCodeBlock:
		//	{ExecutionCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecutionCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{ExecutionCodeBlock}
		public Action getExecutionCodeBlockAction_0() { return cExecutionCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementExistingElementReferenceParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//ReturnStatement:
		//	{ReturnStatement}
		//	'return' element=ExistingElementReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' element=ExistingElementReference
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//element=ExistingElementReference
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ExistingElementReference
		public RuleCall getElementExistingElementReferenceParserRuleCall_2_0() { return cElementExistingElementReferenceParserRuleCall_2_0; }
	}
	
	
	private final ReactionsFileElements pReactionsFile;
	private final ReactionsSegmentElements pReactionsSegment;
	private final ReactionElements pReaction;
	private final ReactionRoutineCallElements pReactionRoutineCall;
	private final InvariantViolationEventElements pInvariantViolationEvent;
	private final TriggerElements pTrigger;
	private final ModelChangeElements pModelChange;
	private final ConcreteModelChangeElements pConcreteModelChange;
	private final ModelElementChangeElements pModelElementChange;
	private final ModelAttributeChangeElements pModelAttributeChange;
	private final ArbitraryModelChangeElements pArbitraryModelChange;
	private final ElementExistenceChangeTypeElements pElementExistenceChangeType;
	private final ElementUsageChangeTypeElements pElementUsageChangeType;
	private final ElementCreationChangeTypeElements pElementCreationChangeType;
	private final ElementDeletionChangeTypeElements pElementDeletionChangeType;
	private final ElementFeatureChangeTypeElements pElementFeatureChangeType;
	private final ElementRootChangeTypeElements pElementRootChangeType;
	private final ElementInsertionChangeTypeElements pElementInsertionChangeType;
	private final ElementInsertionInListChangeTypeElements pElementInsertionInListChangeType;
	private final ElementInsertionAsRootChangeTypeElements pElementInsertionAsRootChangeType;
	private final ElementRemovalChangeTypeElements pElementRemovalChangeType;
	private final ElementRemovalAsRootChangeTypeElements pElementRemovalAsRootChangeType;
	private final ElementRemovalFromListChangeTypeElements pElementRemovalFromListChangeType;
	private final ElementReplacementChangeTypeElements pElementReplacementChangeType;
	private final ElementCreationAndInsertionChangeTypeElements pElementCreationAndInsertionChangeType;
	private final ElementDeletionAndRemovalChangeTypeElements pElementDeletionAndRemovalChangeType;
	private final ElementDeletionAndCreationAndReplacementChangeTypeElements pElementDeletionAndCreationAndReplacementChangeType;
	private final ElementChangeTypeElements pElementChangeType;
	private final ElementCompoundChangeTypeElements pElementCompoundChangeType;
	private final RoutineElements pRoutine;
	private final RoutineInputElements pRoutineInput;
	private final MatcherBlockElements pMatcherBlock;
	private final MatcherStatementElements pMatcherStatement;
	private final RetrieveModelElementStatementElements pRetrieveModelElementStatement;
	private final MatcherCheckStatementElements pMatcherCheckStatement;
	private final ActionBlockElements pActionBlock;
	private final RoutineCallStatementElements pRoutineCallStatement;
	private final ActionStatementElements pActionStatement;
	private final CreateModelElementStatementElements pCreateModelElementStatement;
	private final DeleteModelElementStatementElements pDeleteModelElementStatement;
	private final UpdateModelElementStatementElements pUpdateModelElementStatement;
	private final CreateCorrespondenceStatementElements pCreateCorrespondenceStatement;
	private final RemoveCorrespondenceStatementElements pRemoveCorrespondenceStatement;
	private final CodeBlockElements pCodeBlock;
	private final ExecuteActionBlockElements pExecuteActionBlock;
	private final RoutineCallBlockElements pRoutineCallBlock;
	private final TaggableElements pTaggable;
	private final ExistingElementReferenceElements pExistingElementReference;
	private final TagCodeBlockElements pTagCodeBlock;
	private final PreconditionCodeBlockElements pPreconditionCodeBlock;
	private final CorrespondingObjectCodeBlockElements pCorrespondingObjectCodeBlock;
	private final ExecutionCodeBlockElements pExecutionCodeBlock;
	private final ReturnStatementElements pReturnStatement;
	
	private final Grammar grammar;
	
	private final MirBaseGrammarAccess gaMirBase;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public ReactionsLanguageGrammarAccess(GrammarProvider grammarProvider,
			MirBaseGrammarAccess gaMirBase,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMirBase = gaMirBase;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pReactionsFile = new ReactionsFileElements();
		this.pReactionsSegment = new ReactionsSegmentElements();
		this.pReaction = new ReactionElements();
		this.pReactionRoutineCall = new ReactionRoutineCallElements();
		this.pInvariantViolationEvent = new InvariantViolationEventElements();
		this.pTrigger = new TriggerElements();
		this.pModelChange = new ModelChangeElements();
		this.pConcreteModelChange = new ConcreteModelChangeElements();
		this.pModelElementChange = new ModelElementChangeElements();
		this.pModelAttributeChange = new ModelAttributeChangeElements();
		this.pArbitraryModelChange = new ArbitraryModelChangeElements();
		this.pElementExistenceChangeType = new ElementExistenceChangeTypeElements();
		this.pElementUsageChangeType = new ElementUsageChangeTypeElements();
		this.pElementCreationChangeType = new ElementCreationChangeTypeElements();
		this.pElementDeletionChangeType = new ElementDeletionChangeTypeElements();
		this.pElementFeatureChangeType = new ElementFeatureChangeTypeElements();
		this.pElementRootChangeType = new ElementRootChangeTypeElements();
		this.pElementInsertionChangeType = new ElementInsertionChangeTypeElements();
		this.pElementInsertionInListChangeType = new ElementInsertionInListChangeTypeElements();
		this.pElementInsertionAsRootChangeType = new ElementInsertionAsRootChangeTypeElements();
		this.pElementRemovalChangeType = new ElementRemovalChangeTypeElements();
		this.pElementRemovalAsRootChangeType = new ElementRemovalAsRootChangeTypeElements();
		this.pElementRemovalFromListChangeType = new ElementRemovalFromListChangeTypeElements();
		this.pElementReplacementChangeType = new ElementReplacementChangeTypeElements();
		this.pElementCreationAndInsertionChangeType = new ElementCreationAndInsertionChangeTypeElements();
		this.pElementDeletionAndRemovalChangeType = new ElementDeletionAndRemovalChangeTypeElements();
		this.pElementDeletionAndCreationAndReplacementChangeType = new ElementDeletionAndCreationAndReplacementChangeTypeElements();
		this.pElementChangeType = new ElementChangeTypeElements();
		this.pElementCompoundChangeType = new ElementCompoundChangeTypeElements();
		this.pRoutine = new RoutineElements();
		this.pRoutineInput = new RoutineInputElements();
		this.pMatcherBlock = new MatcherBlockElements();
		this.pMatcherStatement = new MatcherStatementElements();
		this.pRetrieveModelElementStatement = new RetrieveModelElementStatementElements();
		this.pMatcherCheckStatement = new MatcherCheckStatementElements();
		this.pActionBlock = new ActionBlockElements();
		this.pRoutineCallStatement = new RoutineCallStatementElements();
		this.pActionStatement = new ActionStatementElements();
		this.pCreateModelElementStatement = new CreateModelElementStatementElements();
		this.pDeleteModelElementStatement = new DeleteModelElementStatementElements();
		this.pUpdateModelElementStatement = new UpdateModelElementStatementElements();
		this.pCreateCorrespondenceStatement = new CreateCorrespondenceStatementElements();
		this.pRemoveCorrespondenceStatement = new RemoveCorrespondenceStatementElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pExecuteActionBlock = new ExecuteActionBlockElements();
		this.pRoutineCallBlock = new RoutineCallBlockElements();
		this.pTaggable = new TaggableElements();
		this.pExistingElementReference = new ExistingElementReferenceElements();
		this.pTagCodeBlock = new TagCodeBlockElements();
		this.pPreconditionCodeBlock = new PreconditionCodeBlockElements();
		this.pCorrespondingObjectCodeBlock = new CorrespondingObjectCodeBlockElements();
		this.pExecutionCodeBlock = new ExecutionCodeBlockElements();
		this.pReturnStatement = new ReturnStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tools.vitruv.dsls.reactions.ReactionsLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MirBaseGrammarAccess getMirBaseGrammarAccess() {
		return gaMirBase;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//ReactionsFile:
	//	namespaceImports=XImportSection?
	//	MirBaseFile
	//	reactionsSegments+=ReactionsSegment+;
	public ReactionsFileElements getReactionsFileAccess() {
		return pReactionsFile;
	}
	
	public ParserRule getReactionsFileRule() {
		return getReactionsFileAccess().getRule();
	}
	
	//ReactionsSegment:
	//	'reactions:' name=ValidID
	//	'in reaction to changes in' fromMetamodel=MetamodelReference
	//	'execute actions in' toMetamodel=MetamodelReference (reactions+=Reaction | routines+=Routine)*;
	public ReactionsSegmentElements getReactionsSegmentAccess() {
		return pReactionsSegment;
	}
	
	public ParserRule getReactionsSegmentRule() {
		return getReactionsSegmentAccess().getRule();
	}
	
	//// *********************************
	//// *********** REACTIONS ***********
	//// *********************************
	//Reaction:
	//	documentation=ML_COMMENT?
	//	'reaction' name=ValidID? '{'
	//	trigger=Trigger
	//	callRoutine=ReactionRoutineCall
	//	'}';
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//ReactionRoutineCall:
	//	{ReactionRoutineCall} RoutineCallBlock;
	public ReactionRoutineCallElements getReactionRoutineCallAccess() {
		return pReactionRoutineCall;
	}
	
	public ParserRule getReactionRoutineCallRule() {
		return getReactionRoutineCallAccess().getRule();
	}
	
	//// *********** TRIGGER ***********
	//InvariantViolationEvent:
	//	'invariant' violation=[ecore::EClass|QualifiedName];
	public InvariantViolationEventElements getInvariantViolationEventAccess() {
		return pInvariantViolationEvent;
	}
	
	public ParserRule getInvariantViolationEventRule() {
		return getInvariantViolationEventAccess().getRule();
	}
	
	//Trigger: // TODO HK Extend this by "before" executing the transformation before applying the change
	//	'after' (ModelChange | InvariantViolationEvent) ('with' precondition=PreconditionCodeBlock)?;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//ModelChange:
	//	ArbitraryModelChange | ConcreteModelChange;
	public ModelChangeElements getModelChangeAccess() {
		return pModelChange;
	}
	
	public ParserRule getModelChangeRule() {
		return getModelChangeAccess().getRule();
	}
	
	//ConcreteModelChange:
	//	ModelElementChange | ModelAttributeChange;
	public ConcreteModelChangeElements getConcreteModelChangeAccess() {
		return pConcreteModelChange;
	}
	
	public ParserRule getConcreteModelChangeRule() {
		return getConcreteModelChangeAccess().getRule();
	}
	
	//ModelElementChange:
	//	'element' elementType=UnnamedMetaclassReference? changeType=ElementChangeType;
	public ModelElementChangeElements getModelElementChangeAccess() {
		return pModelElementChange;
	}
	
	public ParserRule getModelElementChangeRule() {
		return getModelElementChangeAccess().getRule();
	}
	
	//ModelAttributeChange:
	//	'attribute' ({ModelAttributeInsertedChange} 'insert in' | {ModelAttributeRemovedChange} 'remove from' |
	//	{ModelAttributeReplacedChange} 'replaced at') feature=MetaclassFeatureReference;
	public ModelAttributeChangeElements getModelAttributeChangeAccess() {
		return pModelAttributeChange;
	}
	
	public ParserRule getModelAttributeChangeRule() {
		return getModelAttributeChangeAccess().getRule();
	}
	
	//ArbitraryModelChange:
	//	{ArbitraryModelChange} 'any change';
	public ArbitraryModelChangeElements getArbitraryModelChangeAccess() {
		return pArbitraryModelChange;
	}
	
	public ParserRule getArbitraryModelChangeRule() {
		return getArbitraryModelChangeAccess().getRule();
	}
	
	//// *********** Atomic element changes ***********
	//ElementExistenceChangeType:
	//	ElementCreationChangeType | ElementDeletionChangeType;
	public ElementExistenceChangeTypeElements getElementExistenceChangeTypeAccess() {
		return pElementExistenceChangeType;
	}
	
	public ParserRule getElementExistenceChangeTypeRule() {
		return getElementExistenceChangeTypeAccess().getRule();
	}
	
	//ElementUsageChangeType ModelElementUsageChangeType:
	//	ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType
	public ElementUsageChangeTypeElements getElementUsageChangeTypeAccess() {
		return pElementUsageChangeType;
	}
	
	public ParserRule getElementUsageChangeTypeRule() {
		return getElementUsageChangeTypeAccess().getRule();
	}
	
	//ElementCreationChangeType:
	//	'created' {ElementCreationChangeType};
	public ElementCreationChangeTypeElements getElementCreationChangeTypeAccess() {
		return pElementCreationChangeType;
	}
	
	public ParserRule getElementCreationChangeTypeRule() {
		return getElementCreationChangeTypeAccess().getRule();
	}
	
	//ElementDeletionChangeType:
	//	'deleted' {ElementDeletionChangeType};
	public ElementDeletionChangeTypeElements getElementDeletionChangeTypeAccess() {
		return pElementDeletionChangeType;
	}
	
	public ParserRule getElementDeletionChangeTypeRule() {
		return getElementDeletionChangeTypeAccess().getRule();
	}
	
	//fragment ElementFeatureChangeType:
	//	feature=MetaclassFeatureReference;
	public ElementFeatureChangeTypeElements getElementFeatureChangeTypeAccess() {
		return pElementFeatureChangeType;
	}
	
	public ParserRule getElementFeatureChangeTypeRule() {
		return getElementFeatureChangeTypeAccess().getRule();
	}
	
	//// This is just for a complete type hierachy
	//ElementRootChangeType:
	//	ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;
	public ElementRootChangeTypeElements getElementRootChangeTypeAccess() {
		return pElementRootChangeType;
	}
	
	public ParserRule getElementRootChangeTypeRule() {
		return getElementRootChangeTypeAccess().getRule();
	}
	
	//ElementInsertionChangeType:
	//	ElementInsertionInListChangeType | ElementInsertionAsRootChangeType;
	public ElementInsertionChangeTypeElements getElementInsertionChangeTypeAccess() {
		return pElementInsertionChangeType;
	}
	
	public ParserRule getElementInsertionChangeTypeRule() {
		return getElementInsertionChangeTypeAccess().getRule();
	}
	
	//ElementInsertionInListChangeType:
	//	'inserted in' ElementFeatureChangeType;
	public ElementInsertionInListChangeTypeElements getElementInsertionInListChangeTypeAccess() {
		return pElementInsertionInListChangeType;
	}
	
	public ParserRule getElementInsertionInListChangeTypeRule() {
		return getElementInsertionInListChangeTypeAccess().getRule();
	}
	
	//ElementInsertionAsRootChangeType:
	//	{ElementInsertionAsRootChangeType} 'inserted as root';
	public ElementInsertionAsRootChangeTypeElements getElementInsertionAsRootChangeTypeAccess() {
		return pElementInsertionAsRootChangeType;
	}
	
	public ParserRule getElementInsertionAsRootChangeTypeRule() {
		return getElementInsertionAsRootChangeTypeAccess().getRule();
	}
	
	//ElementRemovalChangeType:
	//	ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType;
	public ElementRemovalChangeTypeElements getElementRemovalChangeTypeAccess() {
		return pElementRemovalChangeType;
	}
	
	public ParserRule getElementRemovalChangeTypeRule() {
		return getElementRemovalChangeTypeAccess().getRule();
	}
	
	//ElementRemovalAsRootChangeType:
	//	{ElementRemovalAsRootChangeType} 'removed as root';
	public ElementRemovalAsRootChangeTypeElements getElementRemovalAsRootChangeTypeAccess() {
		return pElementRemovalAsRootChangeType;
	}
	
	public ParserRule getElementRemovalAsRootChangeTypeRule() {
		return getElementRemovalAsRootChangeTypeAccess().getRule();
	}
	
	//ElementRemovalFromListChangeType:
	//	'removed from' ElementFeatureChangeType;
	public ElementRemovalFromListChangeTypeElements getElementRemovalFromListChangeTypeAccess() {
		return pElementRemovalFromListChangeType;
	}
	
	public ParserRule getElementRemovalFromListChangeTypeRule() {
		return getElementRemovalFromListChangeTypeAccess().getRule();
	}
	
	//ElementReplacementChangeType:
	//	'replaced at' ElementFeatureChangeType;
	public ElementReplacementChangeTypeElements getElementReplacementChangeTypeAccess() {
		return pElementReplacementChangeType;
	}
	
	public ParserRule getElementReplacementChangeTypeRule() {
		return getElementReplacementChangeTypeAccess().getRule();
	}
	
	//// *********** Compound element changes ***********
	//ElementCreationAndInsertionChangeType:
	//	createChange=ElementCreationChangeType 'and' insertChange=ElementInsertionChangeType;
	public ElementCreationAndInsertionChangeTypeElements getElementCreationAndInsertionChangeTypeAccess() {
		return pElementCreationAndInsertionChangeType;
	}
	
	public ParserRule getElementCreationAndInsertionChangeTypeRule() {
		return getElementCreationAndInsertionChangeTypeAccess().getRule();
	}
	
	//ElementDeletionAndRemovalChangeType:
	//	deleteChange=ElementDeletionChangeType 'and' removeChange=ElementRemovalChangeType;
	public ElementDeletionAndRemovalChangeTypeElements getElementDeletionAndRemovalChangeTypeAccess() {
		return pElementDeletionAndRemovalChangeType;
	}
	
	public ParserRule getElementDeletionAndRemovalChangeTypeRule() {
		return getElementDeletionAndRemovalChangeTypeAccess().getRule();
	}
	
	//ElementDeletionAndCreationAndReplacementChangeType:
	//	deleteChange=ElementDeletionChangeType 'and' createChange=ElementCreationChangeType 'and'
	//	replacedChange=ElementReplacementChangeType;
	public ElementDeletionAndCreationAndReplacementChangeTypeElements getElementDeletionAndCreationAndReplacementChangeTypeAccess() {
		return pElementDeletionAndCreationAndReplacementChangeType;
	}
	
	public ParserRule getElementDeletionAndCreationAndReplacementChangeTypeRule() {
		return getElementDeletionAndCreationAndReplacementChangeTypeAccess().getRule();
	}
	
	//ElementChangeType:
	//	ElementExistenceChangeType | ElementUsageChangeType | ElementCompoundChangeType;
	public ElementChangeTypeElements getElementChangeTypeAccess() {
		return pElementChangeType;
	}
	
	public ParserRule getElementChangeTypeRule() {
		return getElementChangeTypeAccess().getRule();
	}
	
	//ElementCompoundChangeType:
	//	ElementCreationAndInsertionChangeType | ElementDeletionAndRemovalChangeType |
	//	ElementDeletionAndCreationAndReplacementChangeType;
	public ElementCompoundChangeTypeElements getElementCompoundChangeTypeAccess() {
		return pElementCompoundChangeType;
	}
	
	public ParserRule getElementCompoundChangeTypeRule() {
		return getElementCompoundChangeTypeAccess().getRule();
	}
	
	//// ***************************************
	//// *********** REPAIR ROUTINES ***********
	//// ***************************************
	//Routine:
	//	'routine' name=ValidID input=RoutineInput '{'
	//	matcher=MatcherBlock?
	//	action=ActionBlock
	//	return=ReturnStatement?
	//	'}';
	public RoutineElements getRoutineAccess() {
		return pRoutine;
	}
	
	public ParserRule getRoutineRule() {
		return getRoutineAccess().getRule();
	}
	
	//RoutineInput:
	//	{RoutineInput}
	//	'(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement) (','
	//	(modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')';
	public RoutineInputElements getRoutineInputAccess() {
		return pRoutineInput;
	}
	
	public ParserRule getRoutineInputRule() {
		return getRoutineInputAccess().getRule();
	}
	
	//// *********** MATCHER ***********
	//MatcherBlock Matcher:
	//	{Matcher}
	//	'match' '{'
	//	matcherStatements+=MatcherStatement+
	//	'}'
	public MatcherBlockElements getMatcherBlockAccess() {
		return pMatcherBlock;
	}
	
	public ParserRule getMatcherBlockRule() {
		return getMatcherBlockAccess().getRule();
	}
	
	//MatcherStatement:
	//	RetrieveModelElementStatement | MatcherCheckStatement;
	public MatcherStatementElements getMatcherStatementAccess() {
		return pMatcherStatement;
	}
	
	public ParserRule getMatcherStatementRule() {
		return getMatcherStatementAccess().getRule();
	}
	
	//RetrieveModelElementStatement RetrieveModelElement:
	//	{RetrieveModelElement} (('val' name=ValidID '=')? 'retrieve' optional?='optional'? | abscence?='require absence of')
	//	MetaclassReference 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)?
	//	('with' precondition=PreconditionCodeBlock)?
	public RetrieveModelElementStatementElements getRetrieveModelElementStatementAccess() {
		return pRetrieveModelElementStatement;
	}
	
	public ParserRule getRetrieveModelElementStatementRule() {
		return getRetrieveModelElementStatementAccess().getRule();
	}
	
	//MatcherCheckStatement:
	//	{MatcherCheckStatement}
	//	'check' CodeBlock;
	public MatcherCheckStatementElements getMatcherCheckStatementAccess() {
		return pMatcherCheckStatement;
	}
	
	public ParserRule getMatcherCheckStatementRule() {
		return getMatcherCheckStatementAccess().getRule();
	}
	
	//// *********** EFFECTS ***********
	//ActionBlock Action:
	//	{Action}
	//	'action' '{'
	//	actionStatements+=ActionStatement+
	//	'}'
	public ActionBlockElements getActionBlockAccess() {
		return pActionBlock;
	}
	
	public ParserRule getActionBlockRule() {
		return getActionBlockAccess().getRule();
	}
	
	//RoutineCallStatement:
	//	{RoutineCallStatement} RoutineCallBlock;
	public RoutineCallStatementElements getRoutineCallStatementAccess() {
		return pRoutineCallStatement;
	}
	
	public ParserRule getRoutineCallStatementRule() {
		return getRoutineCallStatementAccess().getRule();
	}
	
	//ActionStatement:
	//	CreateModelElementStatement | DeleteModelElementStatement | UpdateModelElementStatement |
	//	CreateCorrespondenceStatement | RemoveCorrespondenceStatement | ExecuteActionBlock | RoutineCallStatement;
	public ActionStatementElements getActionStatementAccess() {
		return pActionStatement;
	}
	
	public ParserRule getActionStatementRule() {
		return getActionStatementAccess().getRule();
	}
	
	//CreateModelElementStatement CreateModelElement:
	//	{CreateModelElement}
	//	'val' name=ValidID '=' 'create' MetaclassReference ("and" "initialize" initializationBlock=ExecutionCodeBlock)?
	public CreateModelElementStatementElements getCreateModelElementStatementAccess() {
		return pCreateModelElementStatement;
	}
	
	public ParserRule getCreateModelElementStatementRule() {
		return getCreateModelElementStatementAccess().getRule();
	}
	
	//DeleteModelElementStatement DeleteModelElement:
	//	{DeleteModelElement}
	//	"delete" element=ExistingElementReference
	public DeleteModelElementStatementElements getDeleteModelElementStatementAccess() {
		return pDeleteModelElementStatement;
	}
	
	public ParserRule getDeleteModelElementStatementRule() {
		return getDeleteModelElementStatementAccess().getRule();
	}
	
	//UpdateModelElementStatement UpdateModelElement:
	//	{UpdateModelElement}
	//	"update" element=ExistingElementReference updateBlock=ExecutionCodeBlock
	public UpdateModelElementStatementElements getUpdateModelElementStatementAccess() {
		return pUpdateModelElementStatement;
	}
	
	public ParserRule getUpdateModelElementStatementRule() {
		return getUpdateModelElementStatementAccess().getRule();
	}
	
	//CreateCorrespondenceStatement CreateCorrespondence:
	//	{CreateCorrespondence}
	//	"add correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
	//	('tag with' Taggable)?
	public CreateCorrespondenceStatementElements getCreateCorrespondenceStatementAccess() {
		return pCreateCorrespondenceStatement;
	}
	
	public ParserRule getCreateCorrespondenceStatementRule() {
		return getCreateCorrespondenceStatementAccess().getRule();
	}
	
	//RemoveCorrespondenceStatement RemoveCorrespondence:
	//	{RemoveCorrespondence}
	//	"remove correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
	public RemoveCorrespondenceStatementElements getRemoveCorrespondenceStatementAccess() {
		return pRemoveCorrespondenceStatement;
	}
	
	public ParserRule getRemoveCorrespondenceStatementRule() {
		return getRemoveCorrespondenceStatementAccess().getRule();
	}
	
	//// ****** CODE BLOCKS ******
	//fragment CodeBlock:
	//	code=XExpression;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//fragment ExecuteActionBlock:
	//	'execute' CodeBlock;
	public ExecuteActionBlockElements getExecuteActionBlockAccess() {
		return pExecuteActionBlock;
	}
	
	public ParserRule getExecuteActionBlockRule() {
		return getExecuteActionBlockAccess().getRule();
	}
	
	//fragment RoutineCallBlock:
	//	('val' name=ValidID '=')? 'call' CodeBlock;
	public RoutineCallBlockElements getRoutineCallBlockAccess() {
		return pRoutineCallBlock;
	}
	
	public ParserRule getRoutineCallBlockRule() {
		return getRoutineCallBlockAccess().getRule();
	}
	
	//fragment Taggable:
	//	tag=TagCodeBlock;
	public TaggableElements getTaggableAccess() {
		return pTaggable;
	}
	
	public ParserRule getTaggableRule() {
		return getTaggableAccess().getRule();
	}
	
	//ExistingElementReference:
	//	CodeBlock;
	public ExistingElementReferenceElements getExistingElementReferenceAccess() {
		return pExistingElementReference;
	}
	
	public ParserRule getExistingElementReferenceRule() {
		return getExistingElementReferenceAccess().getRule();
	}
	
	//TagCodeBlock:
	//	{TagCodeBlock} CodeBlock;
	public TagCodeBlockElements getTagCodeBlockAccess() {
		return pTagCodeBlock;
	}
	
	public ParserRule getTagCodeBlockRule() {
		return getTagCodeBlockAccess().getRule();
	}
	
	//PreconditionCodeBlock:
	//	{PreconditionCodeBlock} CodeBlock;
	public PreconditionCodeBlockElements getPreconditionCodeBlockAccess() {
		return pPreconditionCodeBlock;
	}
	
	public ParserRule getPreconditionCodeBlockRule() {
		return getPreconditionCodeBlockAccess().getRule();
	}
	
	//CorrespondingObjectCodeBlock:
	//	{CorrespondingObjectCodeBlock} CodeBlock;
	public CorrespondingObjectCodeBlockElements getCorrespondingObjectCodeBlockAccess() {
		return pCorrespondingObjectCodeBlock;
	}
	
	public ParserRule getCorrespondingObjectCodeBlockRule() {
		return getCorrespondingObjectCodeBlockAccess().getRule();
	}
	
	//ExecutionCodeBlock:
	//	{ExecutionCodeBlock} CodeBlock;
	public ExecutionCodeBlockElements getExecutionCodeBlockAccess() {
		return pExecutionCodeBlock;
	}
	
	public ParserRule getExecutionCodeBlockRule() {
		return getExecutionCodeBlockAccess().getRule();
	}
	
	//ReturnStatement:
	//	{ReturnStatement}
	//	'return' element=ExistingElementReference;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//DummyEntryRule:
	//	MirBaseFile;
	public MirBaseGrammarAccess.DummyEntryRuleElements getDummyEntryRuleAccess() {
		return gaMirBase.getDummyEntryRuleAccess();
	}
	
	public ParserRule getDummyEntryRuleRule() {
		return getDummyEntryRuleAccess().getRule();
	}
	
	//fragment MirBaseFile:
	//	metamodelImports+=MetamodelImport*;
	public MirBaseGrammarAccess.MirBaseFileElements getMirBaseFileAccess() {
		return gaMirBase.getMirBaseFileAccess();
	}
	
	public ParserRule getMirBaseFileRule() {
		return getMirBaseFileAccess().getRule();
	}
	
	//MetamodelImport:
	//	'import' package=[ecore::EPackage|STRING] 'as' name=ValidID useQualifiedNames?='using qualified names'?;
	public MirBaseGrammarAccess.MetamodelImportElements getMetamodelImportAccess() {
		return gaMirBase.getMetamodelImportAccess();
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}
	
	//NamedJavaElement:
	//	type=JvmTypeReference 'as' name=ValidID;
	public MirBaseGrammarAccess.NamedJavaElementElements getNamedJavaElementAccess() {
		return gaMirBase.getNamedJavaElementAccess();
	}
	
	public ParserRule getNamedJavaElementRule() {
		return getNamedJavaElementAccess().getRule();
	}
	
	//fragment MetaclassReference:
	//	(metamodel=[MetamodelImport] '::')? metaclass=[ecore::EClass|QualifiedName];
	public MirBaseGrammarAccess.MetaclassReferenceElements getMetaclassReferenceAccess() {
		return gaMirBase.getMetaclassReferenceAccess();
	}
	
	public ParserRule getMetaclassReferenceRule() {
		return getMetaclassReferenceAccess().getRule();
	}
	
	//UnnamedMetaclassReference MetaclassReference:
	//	MetaclassReference
	public MirBaseGrammarAccess.UnnamedMetaclassReferenceElements getUnnamedMetaclassReferenceAccess() {
		return gaMirBase.getUnnamedMetaclassReferenceAccess();
	}
	
	public ParserRule getUnnamedMetaclassReferenceRule() {
		return getUnnamedMetaclassReferenceAccess().getRule();
	}
	
	//NamedMetaclassReference:
	//	MetaclassReference ('as' name=ValidID)?;
	public MirBaseGrammarAccess.NamedMetaclassReferenceElements getNamedMetaclassReferenceAccess() {
		return gaMirBase.getNamedMetaclassReferenceAccess();
	}
	
	public ParserRule getNamedMetaclassReferenceRule() {
		return getNamedMetaclassReferenceAccess().getRule();
	}
	
	//ClassicallyNamedModelElement NamedMetaclassReference:
	//	MetaclassReference name=ValidID
	public MirBaseGrammarAccess.ClassicallyNamedModelElementElements getClassicallyNamedModelElementAccess() {
		return gaMirBase.getClassicallyNamedModelElementAccess();
	}
	
	public ParserRule getClassicallyNamedModelElementRule() {
		return getClassicallyNamedModelElementAccess().getRule();
	}
	
	////fragment ModelElement:
	////	element=[ecore::EClass|QualifiedName]
	////;
	////
	////UnnamedModelElement:
	////	ModelElement;
	////		
	////NamedModelElement:
	////	ModelElement ('as' name=ValidID)?
	////;
	//MetaclassFeatureReference:
	//	MetaclassReference '[' feature=[ecore::EStructuralFeature|ValidID] ']';
	public MirBaseGrammarAccess.MetaclassFeatureReferenceElements getMetaclassFeatureReferenceAccess() {
		return gaMirBase.getMetaclassFeatureReferenceAccess();
	}
	
	public ParserRule getMetaclassFeatureReferenceRule() {
		return getMetaclassFeatureReferenceAccess().getRule();
	}
	
	//MetamodelReference:
	//	model=[MetamodelImport];
	public MirBaseGrammarAccess.MetamodelReferenceElements getMetamodelReferenceAccess() {
		return gaMirBase.getMetamodelReferenceAccess();
	}
	
	public ParserRule getMetamodelReferenceRule() {
		return getMetamodelReferenceAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
