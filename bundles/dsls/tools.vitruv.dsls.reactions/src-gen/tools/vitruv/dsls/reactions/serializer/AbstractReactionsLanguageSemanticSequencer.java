/*
 * generated by Xtext 2.10.0
 */
package tools.vitruv.dsls.reactions.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import tools.vitruv.dsls.mirbase.mirBase.DummyEntryRule;
import tools.vitruv.dsls.mirbase.mirBase.MetaclassFeatureReference;
import tools.vitruv.dsls.mirbase.mirBase.MetaclassReference;
import tools.vitruv.dsls.mirbase.mirBase.MetamodelImport;
import tools.vitruv.dsls.mirbase.mirBase.MetamodelReference;
import tools.vitruv.dsls.mirbase.mirBase.MirBasePackage;
import tools.vitruv.dsls.mirbase.mirBase.NamedJavaElement;
import tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference;
import tools.vitruv.dsls.mirbase.serializer.MirBaseSemanticSequencer;
import tools.vitruv.dsls.reactions.reactionsLanguage.ActionStatement;
import tools.vitruv.dsls.reactions.reactionsLanguage.ArbitraryModelChange;
import tools.vitruv.dsls.reactions.reactionsLanguage.CorrespondingObjectCodeBlock;
import tools.vitruv.dsls.reactions.reactionsLanguage.CreateCorrespondence;
import tools.vitruv.dsls.reactions.reactionsLanguage.CreateModelElement;
import tools.vitruv.dsls.reactions.reactionsLanguage.DeleteModelElement;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementCreationAndInsertionChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementCreationChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementDeletionAndCreationAndReplacementChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementDeletionAndRemovalChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementDeletionChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementInsertionAsRootChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementInsertionInListChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementRemovalAsRootChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementRemovalFromListChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementReplacementChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ExecutionCodeBlock;
import tools.vitruv.dsls.reactions.reactionsLanguage.ExistingElementReference;
import tools.vitruv.dsls.reactions.reactionsLanguage.InvariantViolationEvent;
import tools.vitruv.dsls.reactions.reactionsLanguage.Matcher;
import tools.vitruv.dsls.reactions.reactionsLanguage.MatcherCheckStatement;
import tools.vitruv.dsls.reactions.reactionsLanguage.ModelAttributeInsertedChange;
import tools.vitruv.dsls.reactions.reactionsLanguage.ModelAttributeRemovedChange;
import tools.vitruv.dsls.reactions.reactionsLanguage.ModelAttributeReplacedChange;
import tools.vitruv.dsls.reactions.reactionsLanguage.ModelElementChange;
import tools.vitruv.dsls.reactions.reactionsLanguage.PreconditionCodeBlock;
import tools.vitruv.dsls.reactions.reactionsLanguage.Reaction;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionRoutineCall;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsFile;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsLanguagePackage;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsSegment;
import tools.vitruv.dsls.reactions.reactionsLanguage.RemoveCorrespondence;
import tools.vitruv.dsls.reactions.reactionsLanguage.RetrieveModelElement;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReturnStatement;
import tools.vitruv.dsls.reactions.reactionsLanguage.Routine;
import tools.vitruv.dsls.reactions.reactionsLanguage.RoutineCallStatement;
import tools.vitruv.dsls.reactions.reactionsLanguage.RoutineInput;
import tools.vitruv.dsls.reactions.reactionsLanguage.TagCodeBlock;
import tools.vitruv.dsls.reactions.reactionsLanguage.UpdateModelElement;
import tools.vitruv.dsls.reactions.services.ReactionsLanguageGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractReactionsLanguageSemanticSequencer extends MirBaseSemanticSequencer {

	@Inject
	private ReactionsLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MirBasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MirBasePackage.DUMMY_ENTRY_RULE:
				sequence_MirBaseFile(context, (DummyEntryRule) semanticObject); 
				return; 
			case MirBasePackage.METACLASS_FEATURE_REFERENCE:
				sequence_MetaclassFeatureReference_MetaclassReference(context, (MetaclassFeatureReference) semanticObject); 
				return; 
			case MirBasePackage.METACLASS_REFERENCE:
				sequence_MetaclassReference(context, (MetaclassReference) semanticObject); 
				return; 
			case MirBasePackage.METAMODEL_IMPORT:
				sequence_MetamodelImport(context, (MetamodelImport) semanticObject); 
				return; 
			case MirBasePackage.METAMODEL_REFERENCE:
				sequence_MetamodelReference(context, (MetamodelReference) semanticObject); 
				return; 
			case MirBasePackage.NAMED_JAVA_ELEMENT:
				sequence_NamedJavaElement(context, (NamedJavaElement) semanticObject); 
				return; 
			case MirBasePackage.NAMED_METACLASS_REFERENCE:
				if (rule == grammarAccess.getClassicallyNamedModelElementRule()) {
					sequence_ClassicallyNamedModelElement_MetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedMetaclassReferenceRule()) {
					sequence_MetaclassReference_NamedMetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == ReactionsLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ReactionsLanguagePackage.ACTION:
				sequence_ActionBlock(context, (tools.vitruv.dsls.reactions.reactionsLanguage.Action) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ACTION_STATEMENT:
				sequence_CodeBlock(context, (ActionStatement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ARBITRARY_MODEL_CHANGE:
				if (rule == grammarAccess.getModelChangeRule()
						|| rule == grammarAccess.getArbitraryModelChangeRule()) {
					sequence_ArbitraryModelChange(context, (ArbitraryModelChange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_ArbitraryModelChange_Trigger(context, (ArbitraryModelChange) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.CORRESPONDING_OBJECT_CODE_BLOCK:
				sequence_CodeBlock_CorrespondingObjectCodeBlock(context, (CorrespondingObjectCodeBlock) semanticObject); 
				return; 
			case ReactionsLanguagePackage.CREATE_CORRESPONDENCE:
				sequence_CreateCorrespondenceStatement_Taggable(context, (CreateCorrespondence) semanticObject); 
				return; 
			case ReactionsLanguagePackage.CREATE_MODEL_ELEMENT:
				sequence_CreateModelElementStatement_MetaclassReference(context, (CreateModelElement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.DELETE_MODEL_ELEMENT:
				sequence_DeleteModelElementStatement(context, (DeleteModelElement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE:
				sequence_ElementCreationAndInsertionChangeType(context, (ElementCreationAndInsertionChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_CREATION_CHANGE_TYPE:
				sequence_ElementCreationChangeType(context, (ElementCreationChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE:
				sequence_ElementDeletionAndCreationAndReplacementChangeType(context, (ElementDeletionAndCreationAndReplacementChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE:
				sequence_ElementDeletionAndRemovalChangeType(context, (ElementDeletionAndRemovalChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_DELETION_CHANGE_TYPE:
				sequence_ElementDeletionChangeType(context, (ElementDeletionChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_INSERTION_AS_ROOT_CHANGE_TYPE:
				sequence_ElementInsertionAsRootChangeType(context, (ElementInsertionAsRootChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_INSERTION_IN_LIST_CHANGE_TYPE:
				sequence_ElementFeatureChangeType(context, (ElementInsertionInListChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_REMOVAL_AS_ROOT_CHANGE_TYPE:
				sequence_ElementRemovalAsRootChangeType(context, (ElementRemovalAsRootChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_REMOVAL_FROM_LIST_CHANGE_TYPE:
				sequence_ElementFeatureChangeType(context, (ElementRemovalFromListChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ELEMENT_REPLACEMENT_CHANGE_TYPE:
				sequence_ElementFeatureChangeType(context, (ElementReplacementChangeType) semanticObject); 
				return; 
			case ReactionsLanguagePackage.EXECUTION_CODE_BLOCK:
				sequence_CodeBlock_ExecutionCodeBlock(context, (ExecutionCodeBlock) semanticObject); 
				return; 
			case ReactionsLanguagePackage.EXISTING_ELEMENT_REFERENCE:
				sequence_CodeBlock(context, (ExistingElementReference) semanticObject); 
				return; 
			case ReactionsLanguagePackage.INVARIANT_VIOLATION_EVENT:
				if (rule == grammarAccess.getInvariantViolationEventRule()) {
					sequence_InvariantViolationEvent(context, (InvariantViolationEvent) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_InvariantViolationEvent_Trigger(context, (InvariantViolationEvent) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.MATCHER:
				sequence_MatcherBlock(context, (Matcher) semanticObject); 
				return; 
			case ReactionsLanguagePackage.MATCHER_CHECK_STATEMENT:
				sequence_CodeBlock_MatcherCheckStatement(context, (MatcherCheckStatement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.MODEL_ATTRIBUTE_INSERTED_CHANGE:
				if (rule == grammarAccess.getModelChangeRule()
						|| rule == grammarAccess.getConcreteModelChangeRule()
						|| rule == grammarAccess.getModelAttributeChangeRule()) {
					sequence_ModelAttributeChange(context, (ModelAttributeInsertedChange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_ModelAttributeChange_Trigger(context, (ModelAttributeInsertedChange) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.MODEL_ATTRIBUTE_REMOVED_CHANGE:
				if (rule == grammarAccess.getModelChangeRule()
						|| rule == grammarAccess.getConcreteModelChangeRule()
						|| rule == grammarAccess.getModelAttributeChangeRule()) {
					sequence_ModelAttributeChange(context, (ModelAttributeRemovedChange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_ModelAttributeChange_Trigger(context, (ModelAttributeRemovedChange) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.MODEL_ATTRIBUTE_REPLACED_CHANGE:
				if (rule == grammarAccess.getModelChangeRule()
						|| rule == grammarAccess.getConcreteModelChangeRule()
						|| rule == grammarAccess.getModelAttributeChangeRule()) {
					sequence_ModelAttributeChange(context, (ModelAttributeReplacedChange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_ModelAttributeChange_Trigger(context, (ModelAttributeReplacedChange) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.MODEL_ELEMENT_CHANGE:
				if (rule == grammarAccess.getModelChangeRule()
						|| rule == grammarAccess.getConcreteModelChangeRule()
						|| rule == grammarAccess.getModelElementChangeRule()) {
					sequence_ModelElementChange(context, (ModelElementChange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerRule()) {
					sequence_ModelElementChange_Trigger(context, (ModelElementChange) semanticObject); 
					return; 
				}
				else break;
			case ReactionsLanguagePackage.PRECONDITION_CODE_BLOCK:
				sequence_CodeBlock_PreconditionCodeBlock(context, (PreconditionCodeBlock) semanticObject); 
				return; 
			case ReactionsLanguagePackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case ReactionsLanguagePackage.REACTION_ROUTINE_CALL:
				sequence_CodeBlock_ReactionRoutineCall_RoutineCallBlock(context, (ReactionRoutineCall) semanticObject); 
				return; 
			case ReactionsLanguagePackage.REACTIONS_FILE:
				sequence_MirBaseFile_ReactionsFile(context, (ReactionsFile) semanticObject); 
				return; 
			case ReactionsLanguagePackage.REACTIONS_SEGMENT:
				sequence_ReactionsSegment(context, (ReactionsSegment) semanticObject); 
				return; 
			case ReactionsLanguagePackage.REMOVE_CORRESPONDENCE:
				sequence_RemoveCorrespondenceStatement(context, (RemoveCorrespondence) semanticObject); 
				return; 
			case ReactionsLanguagePackage.RETRIEVE_MODEL_ELEMENT:
				sequence_MetaclassReference_RetrieveModelElementStatement_Taggable(context, (RetrieveModelElement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.RETURN_STATEMENT:
				sequence_ReturnStatement(context, (ReturnStatement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ROUTINE:
				sequence_Routine(context, (Routine) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ROUTINE_CALL_STATEMENT:
				sequence_CodeBlock_RoutineCallBlock_RoutineCallStatement(context, (RoutineCallStatement) semanticObject); 
				return; 
			case ReactionsLanguagePackage.ROUTINE_INPUT:
				sequence_RoutineInput(context, (RoutineInput) semanticObject); 
				return; 
			case ReactionsLanguagePackage.TAG_CODE_BLOCK:
				sequence_CodeBlock_TagCodeBlock(context, (TagCodeBlock) semanticObject); 
				return; 
			case ReactionsLanguagePackage.UPDATE_MODEL_ELEMENT:
				sequence_UpdateModelElementStatement(context, (UpdateModelElement) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionBlock returns Action
	 *
	 * Constraint:
	 *     actionStatements+=ActionStatement+
	 */
	protected void sequence_ActionBlock(ISerializationContext context, tools.vitruv.dsls.reactions.reactionsLanguage.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelChange returns ArbitraryModelChange
	 *     ArbitraryModelChange returns ArbitraryModelChange
	 *
	 * Constraint:
	 *     {ArbitraryModelChange}
	 */
	protected void sequence_ArbitraryModelChange(ISerializationContext context, ArbitraryModelChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns ArbitraryModelChange
	 *
	 * Constraint:
	 *     precondition=PreconditionCodeBlock?
	 */
	protected void sequence_ArbitraryModelChange_Trigger(ISerializationContext context, ArbitraryModelChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns ActionStatement
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock(ISerializationContext context, ActionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock_CorrespondingObjectCodeBlock(ISerializationContext context, CorrespondingObjectCodeBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExecutionCodeBlock returns ExecutionCodeBlock
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock_ExecutionCodeBlock(ISerializationContext context, ExecutionCodeBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistingElementReference returns ExistingElementReference
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock(ISerializationContext context, ExistingElementReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MatcherStatement returns MatcherCheckStatement
	 *     MatcherCheckStatement returns MatcherCheckStatement
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock_MatcherCheckStatement(ISerializationContext context, MatcherCheckStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PreconditionCodeBlock returns PreconditionCodeBlock
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock_PreconditionCodeBlock(ISerializationContext context, PreconditionCodeBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactionRoutineCall returns ReactionRoutineCall
	 *
	 * Constraint:
	 *     (name=ValidID? code=XExpression)
	 */
	protected void sequence_CodeBlock_ReactionRoutineCall_RoutineCallBlock(ISerializationContext context, ReactionRoutineCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoutineCallStatement returns RoutineCallStatement
	 *     ActionStatement returns RoutineCallStatement
	 *
	 * Constraint:
	 *     (name=ValidID? code=XExpression)
	 */
	protected void sequence_CodeBlock_RoutineCallBlock_RoutineCallStatement(ISerializationContext context, RoutineCallStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TagCodeBlock returns TagCodeBlock
	 *
	 * Constraint:
	 *     code=XExpression
	 */
	protected void sequence_CodeBlock_TagCodeBlock(ISerializationContext context, TagCodeBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.CODE_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getCodeXExpressionParserRuleCall_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns CreateCorrespondence
	 *     CreateCorrespondenceStatement returns CreateCorrespondence
	 *
	 * Constraint:
	 *     (firstElement=ExistingElementReference secondElement=ExistingElementReference tag=TagCodeBlock?)
	 */
	protected void sequence_CreateCorrespondenceStatement_Taggable(ISerializationContext context, CreateCorrespondence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns CreateModelElement
	 *     CreateModelElementStatement returns CreateModelElement
	 *
	 * Constraint:
	 *     (name=ValidID metamodel=[MetamodelImport|ID]? metaclass=[EClass|QualifiedName] initializationBlock=ExecutionCodeBlock?)
	 */
	protected void sequence_CreateModelElementStatement_MetaclassReference(ISerializationContext context, CreateModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns DeleteModelElement
	 *     DeleteModelElementStatement returns DeleteModelElement
	 *
	 * Constraint:
	 *     element=ExistingElementReference
	 */
	protected void sequence_DeleteModelElementStatement(ISerializationContext context, DeleteModelElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.DELETE_MODEL_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.DELETE_MODEL_ELEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteModelElementStatementAccess().getElementExistingElementReferenceParserRuleCall_2_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementCreationAndInsertionChangeType returns ElementCreationAndInsertionChangeType
	 *     ElementChangeType returns ElementCreationAndInsertionChangeType
	 *     ElementCompoundChangeType returns ElementCreationAndInsertionChangeType
	 *
	 * Constraint:
	 *     (createChange=ElementCreationChangeType insertChange=ElementInsertionChangeType)
	 */
	protected void sequence_ElementCreationAndInsertionChangeType(ISerializationContext context, ElementCreationAndInsertionChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE__CREATE_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE__CREATE_CHANGE));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE__INSERT_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE__INSERT_CHANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementCreationAndInsertionChangeTypeAccess().getCreateChangeElementCreationChangeTypeParserRuleCall_0_0(), semanticObject.getCreateChange());
		feeder.accept(grammarAccess.getElementCreationAndInsertionChangeTypeAccess().getInsertChangeElementInsertionChangeTypeParserRuleCall_2_0(), semanticObject.getInsertChange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementExistenceChangeType returns ElementCreationChangeType
	 *     ElementCreationChangeType returns ElementCreationChangeType
	 *     ElementChangeType returns ElementCreationChangeType
	 *
	 * Constraint:
	 *     {ElementCreationChangeType}
	 */
	protected void sequence_ElementCreationChangeType(ISerializationContext context, ElementCreationChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementDeletionAndCreationAndReplacementChangeType returns ElementDeletionAndCreationAndReplacementChangeType
	 *     ElementChangeType returns ElementDeletionAndCreationAndReplacementChangeType
	 *     ElementCompoundChangeType returns ElementDeletionAndCreationAndReplacementChangeType
	 *
	 * Constraint:
	 *     (deleteChange=ElementDeletionChangeType createChange=ElementCreationChangeType replacedChange=ElementReplacementChangeType)
	 */
	protected void sequence_ElementDeletionAndCreationAndReplacementChangeType(ISerializationContext context, ElementDeletionAndCreationAndReplacementChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__DELETE_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__DELETE_CHANGE));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__CREATE_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__CREATE_CHANGE));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__REPLACED_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE__REPLACED_CHANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementDeletionAndCreationAndReplacementChangeTypeAccess().getDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0(), semanticObject.getDeleteChange());
		feeder.accept(grammarAccess.getElementDeletionAndCreationAndReplacementChangeTypeAccess().getCreateChangeElementCreationChangeTypeParserRuleCall_2_0(), semanticObject.getCreateChange());
		feeder.accept(grammarAccess.getElementDeletionAndCreationAndReplacementChangeTypeAccess().getReplacedChangeElementReplacementChangeTypeParserRuleCall_4_0(), semanticObject.getReplacedChange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementDeletionAndRemovalChangeType returns ElementDeletionAndRemovalChangeType
	 *     ElementChangeType returns ElementDeletionAndRemovalChangeType
	 *     ElementCompoundChangeType returns ElementDeletionAndRemovalChangeType
	 *
	 * Constraint:
	 *     (deleteChange=ElementDeletionChangeType removeChange=ElementRemovalChangeType)
	 */
	protected void sequence_ElementDeletionAndRemovalChangeType(ISerializationContext context, ElementDeletionAndRemovalChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementDeletionAndRemovalChangeTypeAccess().getDeleteChangeElementDeletionChangeTypeParserRuleCall_0_0(), semanticObject.getDeleteChange());
		feeder.accept(grammarAccess.getElementDeletionAndRemovalChangeTypeAccess().getRemoveChangeElementRemovalChangeTypeParserRuleCall_2_0(), semanticObject.getRemoveChange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementExistenceChangeType returns ElementDeletionChangeType
	 *     ElementDeletionChangeType returns ElementDeletionChangeType
	 *     ElementChangeType returns ElementDeletionChangeType
	 *
	 * Constraint:
	 *     {ElementDeletionChangeType}
	 */
	protected void sequence_ElementDeletionChangeType(ISerializationContext context, ElementDeletionChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementUsageChangeType returns ElementInsertionInListChangeType
	 *     ElementInsertionChangeType returns ElementInsertionInListChangeType
	 *     ElementInsertionInListChangeType returns ElementInsertionInListChangeType
	 *     ElementChangeType returns ElementInsertionInListChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ElementFeatureChangeType(ISerializationContext context, ElementInsertionInListChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementFeatureChangeTypeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementUsageChangeType returns ElementRemovalFromListChangeType
	 *     ElementRemovalChangeType returns ElementRemovalFromListChangeType
	 *     ElementRemovalFromListChangeType returns ElementRemovalFromListChangeType
	 *     ElementChangeType returns ElementRemovalFromListChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ElementFeatureChangeType(ISerializationContext context, ElementRemovalFromListChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementFeatureChangeTypeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementUsageChangeType returns ElementReplacementChangeType
	 *     ElementReplacementChangeType returns ElementReplacementChangeType
	 *     ElementChangeType returns ElementReplacementChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ElementFeatureChangeType(ISerializationContext context, ElementReplacementChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.ELEMENT_FEATURE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementFeatureChangeTypeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementUsageChangeType returns ElementInsertionAsRootChangeType
	 *     ElementRootChangeType returns ElementInsertionAsRootChangeType
	 *     ElementInsertionChangeType returns ElementInsertionAsRootChangeType
	 *     ElementInsertionAsRootChangeType returns ElementInsertionAsRootChangeType
	 *     ElementChangeType returns ElementInsertionAsRootChangeType
	 *
	 * Constraint:
	 *     {ElementInsertionAsRootChangeType}
	 */
	protected void sequence_ElementInsertionAsRootChangeType(ISerializationContext context, ElementInsertionAsRootChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementUsageChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRootChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRemovalChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRemovalAsRootChangeType returns ElementRemovalAsRootChangeType
	 *     ElementChangeType returns ElementRemovalAsRootChangeType
	 *
	 * Constraint:
	 *     {ElementRemovalAsRootChangeType}
	 */
	protected void sequence_ElementRemovalAsRootChangeType(ISerializationContext context, ElementRemovalAsRootChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InvariantViolationEvent returns InvariantViolationEvent
	 *
	 * Constraint:
	 *     violation=[EClass|QualifiedName]
	 */
	protected void sequence_InvariantViolationEvent(ISerializationContext context, InvariantViolationEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.INVARIANT_VIOLATION_EVENT__VIOLATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.INVARIANT_VIOLATION_EVENT__VIOLATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvariantViolationEventAccess().getViolationEClassQualifiedNameParserRuleCall_1_0_1(), semanticObject.getViolation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns InvariantViolationEvent
	 *
	 * Constraint:
	 *     (violation=[EClass|QualifiedName] precondition=PreconditionCodeBlock?)
	 */
	protected void sequence_InvariantViolationEvent_Trigger(ISerializationContext context, InvariantViolationEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MatcherBlock returns Matcher
	 *
	 * Constraint:
	 *     matcherStatements+=MatcherStatement+
	 */
	protected void sequence_MatcherBlock(ISerializationContext context, Matcher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MatcherStatement returns RetrieveModelElement
	 *     RetrieveModelElementStatement returns RetrieveModelElement
	 *
	 * Constraint:
	 *     (
	 *         ((name=ValidID? optional?='optional'?) | abscence?='require absence of')? 
	 *         metamodel=[MetamodelImport|ID]? 
	 *         metaclass=[EClass|QualifiedName] 
	 *         correspondenceSource=CorrespondingObjectCodeBlock 
	 *         tag=TagCodeBlock? 
	 *         precondition=PreconditionCodeBlock?
	 *     )
	 */
	protected void sequence_MetaclassReference_RetrieveModelElementStatement_Taggable(ISerializationContext context, RetrieveModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactionsFile returns ReactionsFile
	 *
	 * Constraint:
	 *     (namespaceImports=XImportSection? metamodelImports+=MetamodelImport* reactionsSegments+=ReactionsSegment+)
	 */
	protected void sequence_MirBaseFile_ReactionsFile(ISerializationContext context, ReactionsFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelChange returns ModelAttributeInsertedChange
	 *     ConcreteModelChange returns ModelAttributeInsertedChange
	 *     ModelAttributeChange returns ModelAttributeInsertedChange
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeInsertedChange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAttributeChangeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_2_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelChange returns ModelAttributeRemovedChange
	 *     ConcreteModelChange returns ModelAttributeRemovedChange
	 *     ModelAttributeChange returns ModelAttributeRemovedChange
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeRemovedChange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAttributeChangeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_2_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelChange returns ModelAttributeReplacedChange
	 *     ConcreteModelChange returns ModelAttributeReplacedChange
	 *     ModelAttributeChange returns ModelAttributeReplacedChange
	 *
	 * Constraint:
	 *     feature=MetaclassFeatureReference
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeReplacedChange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.MODEL_ATTRIBUTE_CHANGE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAttributeChangeAccess().getFeatureMetaclassFeatureReferenceParserRuleCall_2_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns ModelAttributeInsertedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassFeatureReference precondition=PreconditionCodeBlock?)
	 */
	protected void sequence_ModelAttributeChange_Trigger(ISerializationContext context, ModelAttributeInsertedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns ModelAttributeRemovedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassFeatureReference precondition=PreconditionCodeBlock?)
	 */
	protected void sequence_ModelAttributeChange_Trigger(ISerializationContext context, ModelAttributeRemovedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns ModelAttributeReplacedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassFeatureReference precondition=PreconditionCodeBlock?)
	 */
	protected void sequence_ModelAttributeChange_Trigger(ISerializationContext context, ModelAttributeReplacedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelChange returns ModelElementChange
	 *     ConcreteModelChange returns ModelElementChange
	 *     ModelElementChange returns ModelElementChange
	 *
	 * Constraint:
	 *     (elementType=UnnamedMetaclassReference? changeType=ElementChangeType)
	 */
	protected void sequence_ModelElementChange(ISerializationContext context, ModelElementChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns ModelElementChange
	 *
	 * Constraint:
	 *     (elementType=UnnamedMetaclassReference? changeType=ElementChangeType precondition=PreconditionCodeBlock?)
	 */
	protected void sequence_ModelElementChange_Trigger(ISerializationContext context, ModelElementChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (documentation=ML_COMMENT? name=ValidID? trigger=Trigger callRoutine=ReactionRoutineCall)
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactionsSegment returns ReactionsSegment
	 *
	 * Constraint:
	 *     (name=ValidID fromMetamodel=MetamodelReference toMetamodel=MetamodelReference (reactions+=Reaction | routines+=Routine)*)
	 */
	protected void sequence_ReactionsSegment(ISerializationContext context, ReactionsSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns RemoveCorrespondence
	 *     RemoveCorrespondenceStatement returns RemoveCorrespondence
	 *
	 * Constraint:
	 *     (firstElement=ExistingElementReference secondElement=ExistingElementReference)
	 */
	protected void sequence_RemoveCorrespondenceStatement(ISerializationContext context, RemoveCorrespondence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.REMOVE_CORRESPONDENCE__FIRST_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.REMOVE_CORRESPONDENCE__FIRST_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.REMOVE_CORRESPONDENCE__SECOND_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.REMOVE_CORRESPONDENCE__SECOND_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveCorrespondenceStatementAccess().getFirstElementExistingElementReferenceParserRuleCall_2_0(), semanticObject.getFirstElement());
		feeder.accept(grammarAccess.getRemoveCorrespondenceStatementAccess().getSecondElementExistingElementReferenceParserRuleCall_4_0(), semanticObject.getSecondElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReturnStatement returns ReturnStatement
	 *
	 * Constraint:
	 *     element=ExistingElementReference
	 */
	protected void sequence_ReturnStatement(ISerializationContext context, ReturnStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.RETURN_STATEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.RETURN_STATEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnStatementAccess().getElementExistingElementReferenceParserRuleCall_2_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RoutineInput returns RoutineInput
	 *
	 * Constraint:
	 *     (
	 *         (modelInputElements+=ClassicallyNamedModelElement | javaInputElements+=NamedJavaElement) 
	 *         modelInputElements+=ClassicallyNamedModelElement? 
	 *         (javaInputElements+=NamedJavaElement? modelInputElements+=ClassicallyNamedModelElement?)*
	 *     )?
	 */
	protected void sequence_RoutineInput(ISerializationContext context, RoutineInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Routine returns Routine
	 *
	 * Constraint:
	 *     (name=ValidID input=RoutineInput matcher=MatcherBlock? action=ActionBlock return=ReturnStatement?)
	 */
	protected void sequence_Routine(ISerializationContext context, Routine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionStatement returns UpdateModelElement
	 *     UpdateModelElementStatement returns UpdateModelElement
	 *
	 * Constraint:
	 *     (element=ExistingElementReference updateBlock=ExecutionCodeBlock)
	 */
	protected void sequence_UpdateModelElementStatement(ISerializationContext context, UpdateModelElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.UPDATE_MODEL_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.UPDATE_MODEL_ELEMENT__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, ReactionsLanguagePackage.Literals.UPDATE_MODEL_ELEMENT__UPDATE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReactionsLanguagePackage.Literals.UPDATE_MODEL_ELEMENT__UPDATE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateModelElementStatementAccess().getElementExistingElementReferenceParserRuleCall_2_0(), semanticObject.getElement());
		feeder.accept(grammarAccess.getUpdateModelElementStatementAccess().getUpdateBlockExecutionCodeBlockParserRuleCall_3_0(), semanticObject.getUpdateBlock());
		feeder.finish();
	}
	
	
}
