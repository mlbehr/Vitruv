/**
 * generated by Xtext 2.10.0
 */
package tools.vitruv.dsls.reactions.reactionsLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.reactions.reactionsLanguage.ElementDeletionAndRemovalChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementDeletionChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ElementRemovalChangeType;
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element Deletion And Removal Change Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.reactions.reactionsLanguage.impl.ElementDeletionAndRemovalChangeTypeImpl#getDeleteChange <em>Delete Change</em>}</li>
 *   <li>{@link tools.vitruv.dsls.reactions.reactionsLanguage.impl.ElementDeletionAndRemovalChangeTypeImpl#getRemoveChange <em>Remove Change</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElementDeletionAndRemovalChangeTypeImpl extends ElementCompoundChangeTypeImpl implements ElementDeletionAndRemovalChangeType
{
  /**
   * The cached value of the '{@link #getDeleteChange() <em>Delete Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeleteChange()
   * @generated
   * @ordered
   */
  protected ElementDeletionChangeType deleteChange;

  /**
   * The cached value of the '{@link #getRemoveChange() <em>Remove Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRemoveChange()
   * @generated
   * @ordered
   */
  protected ElementRemovalChangeType removeChange;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementDeletionAndRemovalChangeTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReactionsLanguagePackage.Literals.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementDeletionChangeType getDeleteChange()
  {
    return deleteChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeleteChange(ElementDeletionChangeType newDeleteChange, NotificationChain msgs)
  {
    ElementDeletionChangeType oldDeleteChange = deleteChange;
    deleteChange = newDeleteChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE, oldDeleteChange, newDeleteChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeleteChange(ElementDeletionChangeType newDeleteChange)
  {
    if (newDeleteChange != deleteChange)
    {
      NotificationChain msgs = null;
      if (deleteChange != null)
        msgs = ((InternalEObject)deleteChange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE, null, msgs);
      if (newDeleteChange != null)
        msgs = ((InternalEObject)newDeleteChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE, null, msgs);
      msgs = basicSetDeleteChange(newDeleteChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE, newDeleteChange, newDeleteChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementRemovalChangeType getRemoveChange()
  {
    return removeChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRemoveChange(ElementRemovalChangeType newRemoveChange, NotificationChain msgs)
  {
    ElementRemovalChangeType oldRemoveChange = removeChange;
    removeChange = newRemoveChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE, oldRemoveChange, newRemoveChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRemoveChange(ElementRemovalChangeType newRemoveChange)
  {
    if (newRemoveChange != removeChange)
    {
      NotificationChain msgs = null;
      if (removeChange != null)
        msgs = ((InternalEObject)removeChange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE, null, msgs);
      if (newRemoveChange != null)
        msgs = ((InternalEObject)newRemoveChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE, null, msgs);
      msgs = basicSetRemoveChange(newRemoveChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE, newRemoveChange, newRemoveChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE:
        return basicSetDeleteChange(null, msgs);
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE:
        return basicSetRemoveChange(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE:
        return getDeleteChange();
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE:
        return getRemoveChange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE:
        setDeleteChange((ElementDeletionChangeType)newValue);
        return;
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE:
        setRemoveChange((ElementRemovalChangeType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE:
        setDeleteChange((ElementDeletionChangeType)null);
        return;
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE:
        setRemoveChange((ElementRemovalChangeType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__DELETE_CHANGE:
        return deleteChange != null;
      case ReactionsLanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE__REMOVE_CHANGE:
        return removeChange != null;
    }
    return super.eIsSet(featureID);
  }

} //ElementDeletionAndRemovalChangeTypeImpl
