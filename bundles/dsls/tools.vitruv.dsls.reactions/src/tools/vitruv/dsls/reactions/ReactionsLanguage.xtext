grammar tools.vitruv.dsls.reactions.ReactionsLanguage with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate reactionsLanguage "http://vitruv.tools/dsls/reactions/ReactionsLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase


ReactionsFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(reactionsSegments+=ReactionsSegment)+;
	
ReactionsSegment:
	'reactions:' name=ValidID
	'in reaction to changes in' fromMetamodel=MetamodelReference 
	'execute actions in' toMetamodel=MetamodelReference
	(reactions+=Reaction |
		routines+=Routine)*;

// *********************************
// *********** REACTIONS ***********
// *********************************

Reaction:
	(documentation=ML_COMMENT)?
	'reaction' (name=ValidID)? '{'
		trigger=Trigger
		callRoutine=ReactionRoutineCall
	'}';
	
ReactionRoutineCall:
	{ReactionRoutineCall}
	RoutineCallBlock;

// *********** TRIGGER ***********

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	// TODO HK Extend this by "before" executing the transformation before applying the change
	'after' (ModelChange | InvariantViolationEvent)
	('with' precondition=PreconditionCodeBlock)?;

ModelChange:
	ArbitraryModelChange | ConcreteModelChange;

ConcreteModelChange:
	ModelElementChange | ModelAttributeChange;

ModelElementChange:
	'element' (elementType=UnnamedMetaclassReference)? changeType=ElementChangeType;


ModelAttributeChange:
	'attribute' ({ModelAttributeInsertedChange} 'insert in' |
		{ModelAttributeRemovedChange} 'remove from' |
		{ModelAttributeReplacedChange} 'replaced at')
		feature=MetaclassFeatureReference;

ArbitraryModelChange:
	{ArbitraryModelChange} 'any change';


// *********** Atomic element changes ***********

ElementExistenceChangeType returns ElementExistenceChangeType:
	ElementCreationChangeType | ElementDeletionChangeType;

ElementUsageChangeType returns ModelElementUsageChangeType:
	ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType;

ElementCreationChangeType returns ElementCreationChangeType:
	'created' {ElementCreationChangeType};

ElementDeletionChangeType returns ElementDeletionChangeType:
	'deleted' {ElementDeletionChangeType};

fragment ElementFeatureChangeType:
	feature=MetaclassFeatureReference;

// This is just for a complete type hierachy
ElementRootChangeType returns ElementRootChangeType:
	ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;

ElementInsertionChangeType:
	(ElementInsertionInListChangeType | ElementInsertionAsRootChangeType);

ElementInsertionInListChangeType:
	'inserted in' ElementFeatureChangeType;

ElementInsertionAsRootChangeType:
	{ElementInsertionAsRootChangeType} 'inserted as root';

ElementRemovalChangeType:
	(ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType);
	
ElementRemovalAsRootChangeType:
	{ElementRemovalAsRootChangeType} 'removed as root';
		
ElementRemovalFromListChangeType:
	'removed from' ElementFeatureChangeType;

ElementReplacementChangeType:
	'replaced at' ElementFeatureChangeType;

// *********** Compound element changes ***********

ElementCreationAndInsertionChangeType:
	createChange=ElementCreationChangeType 'and' insertChange=ElementInsertionChangeType;

ElementDeletionAndRemovalChangeType:
	deleteChange=ElementDeletionChangeType 'and' removeChange=ElementRemovalChangeType;
	
ElementDeletionAndCreationAndReplacementChangeType:
	deleteChange=ElementDeletionChangeType 'and' createChange=ElementCreationChangeType 'and' replacedChange=ElementReplacementChangeType;

ElementChangeType returns ElementChangeType:
	ElementExistenceChangeType | ElementUsageChangeType | ElementCompoundChangeType;

ElementCompoundChangeType returns ElementCompoundChangeType:
	ElementCreationAndInsertionChangeType | ElementDeletionAndRemovalChangeType | ElementDeletionAndCreationAndReplacementChangeType;


// ***************************************
// *********** REPAIR ROUTINES ***********
// ***************************************

Routine:
	'routine' name=ValidID input=RoutineInput '{'
		matcher=MatcherBlock?
		action=ActionBlock
		(return=ReturnStatement)?
	'}';

RoutineInput:
	{RoutineInput}
	'(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')';

// *********** MATCHER ***********

MatcherBlock returns Matcher:
	{Matcher}
	'match' '{'
		(matcherStatements+=MatcherStatement)+
	'}';

MatcherStatement:
	RetrieveModelElementStatement | MatcherCheckStatement;

RetrieveModelElementStatement returns RetrieveModelElement:
	{RetrieveModelElement}
	// TODO remove uses of required property or set it to something like required?=!optional
	((('val' name=ValidID '=')? 'retrieve' optional?='optional'?) | abscence?='require absence of') 
	MetaclassReference 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock
	('tagged with' Taggable)? ('with' precondition=PreconditionCodeBlock)?;

MatcherCheckStatement:
	{MatcherCheckStatement}
	'check' CodeBlock;

// *********** EFFECTS ***********

ActionBlock returns Action:
	{Action}
	'action' '{'
		(actionStatements+=ActionStatement)+
	'}';

RoutineCallStatement returns RoutineCallStatement:
	{RoutineCallStatement}
	RoutineCallBlock;

ActionStatement:
	CreateModelElementStatement | DeleteModelElementStatement | UpdateModelElementStatement | CreateCorrespondenceStatement | RemoveCorrespondenceStatement | ExecuteActionBlock | RoutineCallStatement;
	
CreateModelElementStatement returns CreateModelElement:
	{CreateModelElement}
	'val' name=ValidID '=' 'create' MetaclassReference ("and" "initialize" initializationBlock=ExecutionCodeBlock)?;
	
DeleteModelElementStatement returns DeleteModelElement:
	{DeleteModelElement}
	"delete" element=ExistingElementReference;

UpdateModelElementStatement returns UpdateModelElement:
	{UpdateModelElement}
	"update" element=ExistingElementReference updateBlock=ExecutionCodeBlock;


CreateCorrespondenceStatement returns CreateCorrespondence:
	{CreateCorrespondence}
	"add correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
	('tag with' Taggable)?;
	
RemoveCorrespondenceStatement returns RemoveCorrespondence:
	{RemoveCorrespondence}
	"remove correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference;


// ****** CODE BLOCKS ******

fragment CodeBlock:
	code=XExpression;
	
fragment ExecuteActionBlock:
	'execute' CodeBlock;

fragment RoutineCallBlock:
// TODO move the variable declaration and assignment for routine returns inside the code block not before it!
	('val' name=ValidID '=')? 'call' CodeBlock;

fragment Taggable:
	tag=TagCodeBlock;

ExistingElementReference:
	CodeBlock;

TagCodeBlock returns TagCodeBlock:
	{TagCodeBlock}
	CodeBlock;

PreconditionCodeBlock returns PreconditionCodeBlock:
	{PreconditionCodeBlock}
	CodeBlock;

CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock:
	{CorrespondingObjectCodeBlock}
	CodeBlock;

ExecutionCodeBlock returns ExecutionCodeBlock:
	{ExecutionCodeBlock}
	CodeBlock;
	
ReturnStatement returns ReturnStatement:
	{ReturnStatement}
	'return' element=ExistingElementReference;
