/*
 * generated by Xtext 2.9.0
 */
package tools.vitruv.dsls.reactions.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import tools.vitruv.dsls.reactions.reactionsLanguage.Trigger
import tools.vitruv.dsls.reactions.reactionsLanguage.CodeBlock
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsLanguagePackage
import org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode
import tools.vitruv.dsls.mirbase.mirBase.MetamodelImport
import tools.vitruv.dsls.mirbase.mirBase.MirBasePackage
import tools.vitruv.dsls.reactions.reactionsLanguage.PreconditionCodeBlock
import tools.vitruv.dsls.reactions.reactionsLanguage.Routine
import tools.vitruv.dsls.reactions.reactionsLanguage.CreateCorrespondence
import tools.vitruv.dsls.reactions.reactionsLanguage.RemoveCorrespondence
import tools.vitruv.dsls.reactions.reactionsLanguage.MatcherCheckStatement
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsFile
import tools.vitruv.dsls.reactions.reactionsLanguage.ReactionsSegment
import tools.vitruv.dsls.reactions.reactionsLanguage.Reaction
import tools.vitruv.dsls.reactions.reactionsLanguage.Action
import tools.vitruv.dsls.reactions.reactionsLanguage.RetrieveModelElement
import tools.vitruv.dsls.reactions.reactionsLanguage.ConcreteModelChange
import static extension tools.vitruv.dsls.reactions.codegen.changetyperepresentation.ChangeTypeRepresentationExtractor.*

/**
 * Outline structure definition for a reactions file.
 *
 * @author Heiko Klare
 */
class ReactionsLanguageOutlineTreeProvider extends DefaultOutlineTreeProvider {
	protected def void _createChildren(DocumentRootNode root, ReactionsFile reactionsFile) {
		val importsNode = createEStructuralFeatureNode(root, reactionsFile, 
			MirBasePackage.Literals.MIR_BASE_FILE__METAMODEL_IMPORTS,
			imageDispatcher.invoke(reactionsFile), "imports", false);
		for (imp : reactionsFile.metamodelImports) {
			createChildren(importsNode, imp);
		}
		for (reactionsSegment : reactionsFile.reactionsSegments) {
			createChildren(root, reactionsSegment);
		}
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, ReactionsSegment reactionsSegment) {
		val segmentNode = createEObjectNode(parentNode, reactionsSegment);
		for (reaction : reactionsSegment.reactions) {
			createChildren(segmentNode, reaction);	
		}
		for (routine : reactionsSegment.routines) {
			createChildren(segmentNode, routine);	
		}
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, MetamodelImport imp) {
		val importNode = createEObjectNode(parentNode, imp);
		createEStructuralFeatureNode(importNode,
			imp, MirBasePackage.Literals.METAMODEL_IMPORT__PACKAGE,
			imageDispatcher.invoke(imp.package),
			imp.package.name, true);
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, Reaction reaction) {
		val reactionNode = createEObjectNode(parentNode, reaction);
		if (reaction.documentation != null) {
			createEStructuralFeatureNode(reactionNode, reaction,
				ReactionsLanguagePackage.Literals.REACTION__DOCUMENTATION,
				imageDispatcher.invoke(reaction.documentation),
				"documentation", true);
		}
		val triggerNode = createEStructuralFeatureNode(reactionNode, reaction, 
			ReactionsLanguagePackage.Literals.REACTION__TRIGGER,
			imageDispatcher.invoke(reaction.trigger), "trigger", reaction.trigger == null);
		if (reaction.trigger != null) {
			createChildren(triggerNode, reaction.trigger);
		}
		if (reaction.trigger?.precondition != null) {
			createChildren(triggerNode, reaction.trigger.precondition)
		}
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, PreconditionCodeBlock preconditionBlock) {
		createEObjectNode(parentNode, preconditionBlock);
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, Trigger trigger) {
		createEObjectNode(parentNode, trigger);
	}
	
//	protected def void _createChildren(EStructuralFeatureNode parentNode, ModelElementChange event) {
//		createEObjectNode(parentNode, event);
//		val changeType = event.changeType;
//		switch (changeType) {
//			ElementFeatureChangeType:
//				if (changeType.feature != null) {
//					createEObjectNode(parentNode, changeType.feature.metaclass);
//					if (changeType.feature.feature != null) {
//						createEObjectNode(parentNode, changeType.feature.feature);
//					}
//				}
//			ElementRootChangeType:
//				if (event.elementType != null) {
//					createEObjectNode(parentNode, event.elementType.metaclass);
//				}
//		}
//	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, Routine routine) {
		if (routine.matcher != null) {
			for (element : routine.matcher.matcherStatements) {
				createEObjectNode(parentNode, element);	
			}
		}		
		createChildren(parentNode, routine.action);
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, Action action) {
		// TODO HK Add missing elements: create / delete / update / call routine
		for (element : action.actionStatements.filter(CreateCorrespondence)) {
			createEObjectNode(parentNode, element);	
		}
		for (element : action.actionStatements.filter(RemoveCorrespondence)) {
			createEObjectNode(parentNode, element);	
		}
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, CreateCorrespondence createCorrespondence) {
		createEObjectNode(parentNode, createCorrespondence);
	}
	
	protected def void _createChildren(EStructuralFeatureNode parentNode, CodeBlock codeBlock) {
		createEObjectNode(parentNode, codeBlock);
	}
	
	protected def Object _text(MetamodelImport imp) {
		return imp?.name;
	}
	
	protected def Object _text(Reaction reaction) {
		return "reaction: " + reaction.name;
	}
	
	protected def Object _text(Routine routine) {
		return "action: " + routine.name;
	}
	
	protected def Object _text(ReactionsSegment reactionsSegment) {
		return "segment: " + reactionsSegment.name;
	}
	
	protected def Object _text(Trigger trigger) {
		return "There is no outline for this trigger";
	}
	
	protected def Object _text(ConcreteModelChange event) {
		return event.extractChangeTypeRepresentation.changeType?.simpleName;
	}
	
	protected def Object _text(PreconditionCodeBlock preconditionBlock) {
		return "precondition Block"
	}
	
	protected def Object _text(CodeBlock codeBlock) {
		return "execution Block"
	}
	
	protected def Object _text(RetrieveModelElement elementRetrieve) {
		"retrieve element: " + elementRetrieve.elementText;
	}
	
	protected def Object _text(MatcherCheckStatement checkStatement) {
		"custom check statement";
	}
	
	protected def Object _text(CreateCorrespondence createCorrespondence) {
		"new correspondence";
	}
	
	protected def Object _text(RemoveCorrespondence removeCorrespondence) {
		"remove correspondence";
	}
	
//	protected def Object _text(CorrespondingModelElementDelete elementDelete) {
//		"Delete element: " + elementDelete.elementText;
//	}
	
	private def String getElementText(RetrieveModelElement retrieveElement) {
		return retrieveElement.name + " (" + retrieveElement.metaclass?.name + ")"
	}
	
	protected def boolean _isLeaf(PreconditionCodeBlock compareBlock) {
		return true;
	}
	
	protected def boolean _isLeaf(CodeBlock codeBlock) {
		return true;
	}
	
	protected def boolean _isLeaf(ConcreteModelChange event) {
		return true;
	}
	
	protected def boolean _isLeaf(RetrieveModelElement element) {
		return true;
	}
	
	protected def boolean _isLeaf(MatcherCheckStatement element) {
		return true;
	}
	
	protected def boolean _isLeaf(CreateCorrespondence correspondenceCreate) {
		return true;
	}
	
	protected def boolean _isLeaf(RemoveCorrespondence element) {
		return true;
	}
	
}
