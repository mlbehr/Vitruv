/*
 * generated by Xtext
 */
package edu.kit.ipd.sdq.xocl4inv.eval.validation

import edu.kit.ipd.sdq.xocl4inv.eval.xoclEvalDSL.Invariant
import edu.kit.ipd.sdq.xocl4inv.eval.xoclEvalDSL.XoclEvalDSLPackage
import edu.kit.ipd.sdq.xocl4inv.transformation.exceptions.IllegalExpressionException
import edu.kit.ipd.sdq.xocl4inv.transformation.exceptions.IllegalNodeException
import edu.kit.ipd.sdq.xocl4inv.transformation.exceptions.InvalidParameterException
import edu.kit.ipd.sdq.xocl4inv.transformation.exceptions.TransformationException
import edu.kit.ipd.sdq.xocl4inv.util.InvariantTransformator
import org.eclipse.xtext.validation.Check

import static extension edu.kit.ipd.sdq.xocl4inv.util.XBasePurityChecker.isPure

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XoclEvalDSLValidator extends AbstractXoclEvalDSLValidator {
	@Check
	def checkInvariantPureExpression(Invariant invariant) {
		// check that only pure methods are used in invariant expression
		if(invariant.expression != null && !invariant.expression.pure) {
			warning(
				"Only pure methods are allowed in the expression, make sure that the expression is safe",
				XoclEvalDSLPackage.Literals.INVARIANT__EXPRESSION)
		}
	}

	@Check
	def checkInvariantTransformation(Invariant invariant) {
		// actually perfoms transformation and catches exceptions
		// check that all parameters can be obtained with transformation
		invariant.parameters.forEach [
			try {
				InvariantTransformator.
					transformExpressionToString(invariant.expression, it)
			} catch(IllegalExpressionException e) {
				error(
					"Can not transform invariant, found illegal expression: " +
						e.expression,
					XoclEvalDSLPackage.Literals.INVARIANT__EXPRESSION)
				} catch(InvalidParameterException e) {
					error(
						"Can not transform invariant, found illegal parameter: " +
							e.param,
						XoclEvalDSLPackage.Literals.INVARIANT__EXPRESSION)
					} catch(IllegalNodeException e) {
						error(
							"Can not transform invariant, found illegal node: " +
								e.node,
							XoclEvalDSLPackage.Literals.INVARIANT__EXPRESSION)
						} catch(TransformationException e) {
							error("Can not transform invariant",
								XoclEvalDSLPackage.Literals.
									INVARIANT__EXPRESSION)
								} catch(Exception e) {
									error(
										"An unknown error occurred during transformation: " +
											e.message,
										XoclEvalDSLPackage.Literals.
											INVARIANT__EXPRESSION)
										}
									]
								}
							}
