grammar edu.kit.ipd.sdq.vitruvius.framework.mir.MIR
	with org.eclipse.xtext.xbase.Xbase

generate mIR "http://www.kit.edu/ipd/sdq/vitruvius/framework/mir/MIR"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

MIRFile returns MIRFile: 
	'generates' 'package' generatedPackage=QualifiedName
	('generates' 'type' generatedClass=QualifiedName)?
		
	(
		bundles+=Bundle |
		imports+=Import |
		mappings+=ClassMapping |
		invariants+=Invariant
	)*
;

Import returns Import: 
	'import' 'package' package=[ecore::EPackage|STRING] 
	'as' name=ValidID;
	
Bundle returns Bundle: 
	'bundle' bundleFQN=QualifiedName
;


/////////////
// MAPPINGS
/////////////

MappingBody returns MappingBody: 
	('{'
		('when-where' whenwhere = XBlockExpression)?
		(
		  ('with-block' withBlocks += XBlockExpression) |
		  ('with' withs += FeatureMapping)
		)*
	'}')?
;

// Mappings
ClassMapping returns Mapping:
	{ClassMapping}
	
	'map'
	mappedElements+=NamedEClass
	'and'
	mappedElements+=NamedEClass
		
	constraints=MappingBody
;

FeatureMapping returns Mapping:
	{FeatureMapping}
	
	'map'
	mappedElements+=FeatureCall
	'and'
	mappedElements+=FeatureCall
		
	constraints=MappingBody
;

NamedEClass returns TypedElement:
	{NamedEClass}
	type=[ecore::EClass|QualifiedName]
	('as' name=ValidID)?
;

TypedElementRef:
	ref=[TypedElement]
;

FeatureCall returns TypedElement:
	TypedElementRef
	({FeatureCall.ref=current} "."
		(
			'('
				tail=[ecore::EStructuralFeature|ValidID]
				("[" type=[ecore::EClassifier|QualifiedName] "]")?
			 ('as' name=ValidID)? ')'
		) 
	)*
;

///////////////
// INVARIANTS
///////////////
Invariant:
	'invariant' name=ValidID block=XBlockExpression
;