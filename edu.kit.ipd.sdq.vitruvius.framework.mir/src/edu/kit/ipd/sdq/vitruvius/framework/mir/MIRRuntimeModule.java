/*
 * generated by Xtext
 */
package edu.kit.ipd.sdq.vitruvius.framework.mir;

import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;

import com.google.inject.Binder;
import com.google.inject.Singleton;
import com.google.inject.name.Names;

import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.IGeneratorStatus;
import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.MIRCodeGenerator;
import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.MIRGenerator;
import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.MIRGeneratorStatus;
import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.MIRIntermediateLanguageGenerator;
import edu.kit.ipd.sdq.vitruvius.framework.mir.generator.MIRJvmModelGenerator;
import edu.kit.ipd.sdq.vitruvius.framework.mir.linking.MIRLinkingService;
import edu.kit.ipd.sdq.vitruvius.framework.mir.scoping.MIRGlobalScopeProvider;
import edu.kit.ipd.sdq.vitruvius.framework.mir.scoping.MIRQualifiedNameConverter;
import edu.kit.ipd.sdq.vitruvius.framework.mir.scoping.MIRScopeProviderDelegate;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class MIRRuntimeModule extends edu.kit.ipd.sdq.vitruvius.framework.mir.AbstractMIRRuntimeModule {
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return MIRGlobalScopeProvider.class;
	}
	
	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return MIRLinkingService.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
		      .annotatedWith(Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		      .to(MIRScopeProviderDelegate.class);
	}
	
	@Override
	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return MIRQualifiedNameConverter.class;
	}
	
	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return MIRGenerator.class;
	}
	
	// TODO: can this injection be done differently?
	private Class<? extends MIRIntermediateLanguageGenerator> bindMIRIntermediateLanguageGenerator() { return MIRIntermediateLanguageGenerator.class; }
	private Class<? extends MIRCodeGenerator> bindMIRCodeGenerator() { return MIRCodeGenerator.class; }

	public void configureJvmModelGenerator(Binder binder) {
		binder.bind(JvmModelGenerator.class)
		      .to(MIRJvmModelGenerator.class)
		      .in(Singleton.class);
	}
	
	public void configureIGeneratorStatus(Binder binder) {
		binder.bind(IGeneratorStatus.class)
		      .to(MIRGeneratorStatus.class)
		      .in(Singleton.class);
	}
}
